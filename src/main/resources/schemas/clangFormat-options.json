{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Clang Format Style Schema",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "BasedOnStyle": {
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#basedonstyle'>BasedOnStyle Documentation</a>\nThe style used for all options not specifically set in the configuration.<p style='margin-top:5px'>Invoke completion to see all options",
      "type": "string",
      "enum": [
        "LLVM",
        "Google",
        "Chromium",
        "Mozilla",
        "WebKit",
        "Microsoft",
        "GNU",
        "InheritParentConfig"
      ],
      "x-intellij-enum-metadata": {
        "LLVM": {
          "description": "A style complying with the LLVM coding standards"
        },
        "Google": {
          "description": "A style complying with Google's C++ style guide"
        },
        "Chromium": {
          "description": "A style complying with Chromium's style guide"
        },
        "Mozilla": {
          "description": "A style complying with Mozilla's style guide"
        },
        "WebKit": {
          "description": "A style complying with WebKit's style guide"
        },
        "Microsoft": {
          "description": "A style complying with Microsoft's style guide"
        },
        "GNU": {
          "description": "A style complying with the GNU coding standards"
        }
      },
      "x-intellij-enum-order-sensitive": true
    },
    "AccessModifierOffset": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset'>AccessModifierOffset Documentation</a>\n<p style='margin-top:5px'>The extra indent or outdent of access modifiers, e.g. <code>public:</code>.<p style='margin-top:5px'>From clang-format 3.3"
    },
    "AlignAfterOpenBracket": {
      "type": "string",
      "enum": [
        "Align",
        "DontAlign",
        "AlwaysBreak",
        "BlockIndent"
      ],
      "x-intellij-enum-metadata": {
        "Align": {
          "description": "Align parameters on the open bracket, e.g.:"
        },
        "DontAlign": {
          "description": "Don't align, instead use 'ContinuationIndentWidth', e.g.:"
        },
        "AlwaysBreak": {
          "description": "Always break after an open bracket, if the parameters don't fit"
        },
        "BlockIndent": {
          "description": "Always break after an open bracket, if the parameters don't fit"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignafteropenbracket'>AlignAfterOpenBracket Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, horizontally aligns arguments after an open bracket.\n<p style='margin-top:5px'>This applies to round brackets (parentheses), angle brackets and square\nbrackets.<p style='margin-top:5px'>From clang-format 3.8<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AlignArrayOfStructures": {
      "type": "string",
      "enum": [
        "Left",
        "Right",
        "None"
      ],
      "x-intellij-enum-metadata": {
        "Left": {
          "description": "Align array column and left justify the columns e.g.:"
        },
        "Right": {
          "description": "Align array column and right justify the columns e.g.:"
        },
        "None": {
          "description": "Don't align array initializer columns."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignarrayofstructures'>AlignArrayOfStructures Documentation</a>\n<p style='margin-top:5px'>If not <code>None</code>, when using initialization for an array of structs\naligns the fields into columns.\n<p style='margin-top:5px'><b>Note</b> As of clang-format 15 this option only applied to arrays with equal\n number of columns per row.\n<p style='margin-top:5px'><p style='margin-top:5px'>From clang-format 13<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AlignConsecutiveAssignments": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AcrossComments": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across comments.\n\n<pre><code class='c++'>  true:\n  int d    = 3;\n  /* A comment. */\n  double e = 4;\n\n  false:\n  int d = 3;\n  /* A comment. */\n  double e = 4;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveassignments'>AlignConsecutiveAssignments Documentation</a>\n"
        },
        "AcrossEmptyLines": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across empty lines.\n\n<pre><code class='c++'>  true:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d            = 3;\n\n  false:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d = 3;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveassignments'>AlignConsecutiveAssignments Documentation</a>\n"
        },
        "AlignCompound": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether compound assignments\nlike <code>+=</code> are aligned along with <code>=</code>.\n\n<pre><code class='c++'>  true:\n  a   &= 2;\n  bbb  = 2;\n\n  false:\n  a &= 2;\n  bbb = 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveassignments'>AlignConsecutiveAssignments Documentation</a>\n"
        },
        "AlignFunctionDeclarations": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function declarations\nare aligned.\n\n<pre><code class='c++'>  true:\n  unsigned int f1(void);\n  void         f2(void);\n  size_t       f3(void);\n\n  false:\n  unsigned int f1(void);\n  void f2(void);\n  size_t f3(void);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveassignments'>AlignConsecutiveAssignments Documentation</a>\n"
        },
        "AlignFunctionPointers": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function pointers are\naligned.\n\n<pre><code class='c++'>  true:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int      (*f)();\n\n  false:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int (*f)();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveassignments'>AlignConsecutiveAssignments Documentation</a>\n"
        },
        "Enabled": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligning is enabled.\n\n<pre><code class='c++'>  #define SHORT_NAME       42\n  #define LONGER_NAME      0x007f\n  #define EVEN_LONGER_NAME (2)\n  #define foo(x)           (x * x)\n  #define bar(y, z)        (y + z)\n\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int aaaa : 1;\n  int b    : 12;\n  int ccc  : 8;\n\n  int         aaaa = 12;\n  float       b = 23;\n  std::string ccc;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveassignments'>AlignConsecutiveAssignments Documentation</a>\n"
        },
        "PadOperators": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether short assignment\noperators are left-padded to the same length as long ones in order to\nput all assignment operators to the right of the left hand side.\n\n<pre><code class='c++'>  true:\n  a   &gt;&gt;= 2;\n  bbb   = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n\n  false:\n  a &gt;&gt;= 2;\n  bbb = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveassignments'>AlignConsecutiveAssignments Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveassignments'>AlignConsecutiveAssignments Documentation</a>\n<p style='margin-top:5px'>Style of aligning consecutive assignments.\n<p style='margin-top:5px'><code>Consecutive</code> will result in formattings like:\n\n<pre><code class='c++'>  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n</code></pre><p style='margin-top:5px'>Alignment options.\n<p style='margin-top:5px'>They can also be read as a whole for compatibility. The choices are:\n<p style='margin-top:5px'>* <code>None</code>\n* <code>Consecutive</code>\n* <code>AcrossEmptyLines</code>\n* <code>AcrossComments</code>\n* <code>AcrossEmptyLinesAndComments</code>\n<p style='margin-top:5px'>For example, to align across empty lines and not across comments, either\nof these work.\n\n<pre><code class='c++'>  &lt;option-name&gt;: AcrossEmptyLines\n\n  &lt;option-name&gt;:\n    Enabled: true\n    AcrossEmptyLines: true\n    AcrossComments: false\n</code></pre><p style='margin-top:5px'>From clang-format 3.8"
    },
    "AlignConsecutiveBitFields": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AcrossComments": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across comments.\n\n<pre><code class='c++'>  true:\n  int d    = 3;\n  /* A comment. */\n  double e = 4;\n\n  false:\n  int d = 3;\n  /* A comment. */\n  double e = 4;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivebitfields'>AlignConsecutiveBitFields Documentation</a>\n"
        },
        "AcrossEmptyLines": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across empty lines.\n\n<pre><code class='c++'>  true:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d            = 3;\n\n  false:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d = 3;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivebitfields'>AlignConsecutiveBitFields Documentation</a>\n"
        },
        "AlignCompound": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether compound assignments\nlike <code>+=</code> are aligned along with <code>=</code>.\n\n<pre><code class='c++'>  true:\n  a   &= 2;\n  bbb  = 2;\n\n  false:\n  a &= 2;\n  bbb = 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivebitfields'>AlignConsecutiveBitFields Documentation</a>\n"
        },
        "AlignFunctionDeclarations": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function declarations\nare aligned.\n\n<pre><code class='c++'>  true:\n  unsigned int f1(void);\n  void         f2(void);\n  size_t       f3(void);\n\n  false:\n  unsigned int f1(void);\n  void f2(void);\n  size_t f3(void);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivebitfields'>AlignConsecutiveBitFields Documentation</a>\n"
        },
        "AlignFunctionPointers": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function pointers are\naligned.\n\n<pre><code class='c++'>  true:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int      (*f)();\n\n  false:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int (*f)();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivebitfields'>AlignConsecutiveBitFields Documentation</a>\n"
        },
        "Enabled": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligning is enabled.\n\n<pre><code class='c++'>  #define SHORT_NAME       42\n  #define LONGER_NAME      0x007f\n  #define EVEN_LONGER_NAME (2)\n  #define foo(x)           (x * x)\n  #define bar(y, z)        (y + z)\n\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int aaaa : 1;\n  int b    : 12;\n  int ccc  : 8;\n\n  int         aaaa = 12;\n  float       b = 23;\n  std::string ccc;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivebitfields'>AlignConsecutiveBitFields Documentation</a>\n"
        },
        "PadOperators": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether short assignment\noperators are left-padded to the same length as long ones in order to\nput all assignment operators to the right of the left hand side.\n\n<pre><code class='c++'>  true:\n  a   &gt;&gt;= 2;\n  bbb   = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n\n  false:\n  a &gt;&gt;= 2;\n  bbb = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivebitfields'>AlignConsecutiveBitFields Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivebitfields'>AlignConsecutiveBitFields Documentation</a>\n<p style='margin-top:5px'>Style of aligning consecutive bit fields.\n<p style='margin-top:5px'><code>Consecutive</code> will align the bitfield separators of consecutive lines.\nThis will result in formattings like:\n\n<pre><code class='c++'>  int aaaa : 1;\n  int b    : 12;\n  int ccc  : 8;\n</code></pre><p style='margin-top:5px'>Alignment options.\n<p style='margin-top:5px'>They can also be read as a whole for compatibility. The choices are:\n<p style='margin-top:5px'>* <code>None</code>\n* <code>Consecutive</code>\n* <code>AcrossEmptyLines</code>\n* <code>AcrossComments</code>\n* <code>AcrossEmptyLinesAndComments</code>\n<p style='margin-top:5px'>For example, to align across empty lines and not across comments, either\nof these work.\n\n<pre><code class='c++'>  &lt;option-name&gt;: AcrossEmptyLines\n\n  &lt;option-name&gt;:\n    Enabled: true\n    AcrossEmptyLines: true\n    AcrossComments: false\n</code></pre><p style='margin-top:5px'>From clang-format 11"
    },
    "AlignConsecutiveDeclarations": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AcrossComments": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across comments.\n\n<pre><code class='c++'>  true:\n  int d    = 3;\n  /* A comment. */\n  double e = 4;\n\n  false:\n  int d = 3;\n  /* A comment. */\n  double e = 4;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivedeclarations'>AlignConsecutiveDeclarations Documentation</a>\n"
        },
        "AcrossEmptyLines": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across empty lines.\n\n<pre><code class='c++'>  true:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d            = 3;\n\n  false:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d = 3;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivedeclarations'>AlignConsecutiveDeclarations Documentation</a>\n"
        },
        "AlignCompound": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether compound assignments\nlike <code>+=</code> are aligned along with <code>=</code>.\n\n<pre><code class='c++'>  true:\n  a   &= 2;\n  bbb  = 2;\n\n  false:\n  a &= 2;\n  bbb = 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivedeclarations'>AlignConsecutiveDeclarations Documentation</a>\n"
        },
        "AlignFunctionDeclarations": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function declarations\nare aligned.\n\n<pre><code class='c++'>  true:\n  unsigned int f1(void);\n  void         f2(void);\n  size_t       f3(void);\n\n  false:\n  unsigned int f1(void);\n  void f2(void);\n  size_t f3(void);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivedeclarations'>AlignConsecutiveDeclarations Documentation</a>\n"
        },
        "AlignFunctionPointers": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function pointers are\naligned.\n\n<pre><code class='c++'>  true:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int      (*f)();\n\n  false:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int (*f)();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivedeclarations'>AlignConsecutiveDeclarations Documentation</a>\n"
        },
        "Enabled": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligning is enabled.\n\n<pre><code class='c++'>  #define SHORT_NAME       42\n  #define LONGER_NAME      0x007f\n  #define EVEN_LONGER_NAME (2)\n  #define foo(x)           (x * x)\n  #define bar(y, z)        (y + z)\n\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int aaaa : 1;\n  int b    : 12;\n  int ccc  : 8;\n\n  int         aaaa = 12;\n  float       b = 23;\n  std::string ccc;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivedeclarations'>AlignConsecutiveDeclarations Documentation</a>\n"
        },
        "PadOperators": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether short assignment\noperators are left-padded to the same length as long ones in order to\nput all assignment operators to the right of the left hand side.\n\n<pre><code class='c++'>  true:\n  a   &gt;&gt;= 2;\n  bbb   = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n\n  false:\n  a &gt;&gt;= 2;\n  bbb = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivedeclarations'>AlignConsecutiveDeclarations Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivedeclarations'>AlignConsecutiveDeclarations Documentation</a>\n<p style='margin-top:5px'>Style of aligning consecutive declarations.\n<p style='margin-top:5px'><code>Consecutive</code> will align the declaration names of consecutive lines.\nThis will result in formattings like:\n\n<pre><code class='c++'>  int         aaaa = 12;\n  float       b = 23;\n  std::string ccc;\n</code></pre><p style='margin-top:5px'>Alignment options.\n<p style='margin-top:5px'>They can also be read as a whole for compatibility. The choices are:\n<p style='margin-top:5px'>* <code>None</code>\n* <code>Consecutive</code>\n* <code>AcrossEmptyLines</code>\n* <code>AcrossComments</code>\n* <code>AcrossEmptyLinesAndComments</code>\n<p style='margin-top:5px'>For example, to align across empty lines and not across comments, either\nof these work.\n\n<pre><code class='c++'>  &lt;option-name&gt;: AcrossEmptyLines\n\n  &lt;option-name&gt;:\n    Enabled: true\n    AcrossEmptyLines: true\n    AcrossComments: false\n</code></pre><p style='margin-top:5px'>From clang-format 3.8"
    },
    "AlignConsecutiveMacros": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AcrossComments": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across comments.\n\n<pre><code class='c++'>  true:\n  int d    = 3;\n  /* A comment. */\n  double e = 4;\n\n  false:\n  int d = 3;\n  /* A comment. */\n  double e = 4;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivemacros'>AlignConsecutiveMacros Documentation</a>\n"
        },
        "AcrossEmptyLines": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across empty lines.\n\n<pre><code class='c++'>  true:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d            = 3;\n\n  false:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d = 3;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivemacros'>AlignConsecutiveMacros Documentation</a>\n"
        },
        "AlignCompound": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether compound assignments\nlike <code>+=</code> are aligned along with <code>=</code>.\n\n<pre><code class='c++'>  true:\n  a   &= 2;\n  bbb  = 2;\n\n  false:\n  a &= 2;\n  bbb = 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivemacros'>AlignConsecutiveMacros Documentation</a>\n"
        },
        "AlignFunctionDeclarations": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function declarations\nare aligned.\n\n<pre><code class='c++'>  true:\n  unsigned int f1(void);\n  void         f2(void);\n  size_t       f3(void);\n\n  false:\n  unsigned int f1(void);\n  void f2(void);\n  size_t f3(void);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivemacros'>AlignConsecutiveMacros Documentation</a>\n"
        },
        "AlignFunctionPointers": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function pointers are\naligned.\n\n<pre><code class='c++'>  true:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int      (*f)();\n\n  false:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int (*f)();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivemacros'>AlignConsecutiveMacros Documentation</a>\n"
        },
        "Enabled": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligning is enabled.\n\n<pre><code class='c++'>  #define SHORT_NAME       42\n  #define LONGER_NAME      0x007f\n  #define EVEN_LONGER_NAME (2)\n  #define foo(x)           (x * x)\n  #define bar(y, z)        (y + z)\n\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int aaaa : 1;\n  int b    : 12;\n  int ccc  : 8;\n\n  int         aaaa = 12;\n  float       b = 23;\n  std::string ccc;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivemacros'>AlignConsecutiveMacros Documentation</a>\n"
        },
        "PadOperators": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether short assignment\noperators are left-padded to the same length as long ones in order to\nput all assignment operators to the right of the left hand side.\n\n<pre><code class='c++'>  true:\n  a   &gt;&gt;= 2;\n  bbb   = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n\n  false:\n  a &gt;&gt;= 2;\n  bbb = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivemacros'>AlignConsecutiveMacros Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivemacros'>AlignConsecutiveMacros Documentation</a>\n<p style='margin-top:5px'>Style of aligning consecutive macro definitions.\n<p style='margin-top:5px'><code>Consecutive</code> will result in formattings like:\n\n<pre><code class='c++'>  #define SHORT_NAME       42\n  #define LONGER_NAME      0x007f\n  #define EVEN_LONGER_NAME (2)\n  #define foo(x)           (x * x)\n  #define bar(y, z)        (y + z)\n</code></pre><p style='margin-top:5px'>Alignment options.\n<p style='margin-top:5px'>They can also be read as a whole for compatibility. The choices are:\n<p style='margin-top:5px'>* <code>None</code>\n* <code>Consecutive</code>\n* <code>AcrossEmptyLines</code>\n* <code>AcrossComments</code>\n* <code>AcrossEmptyLinesAndComments</code>\n<p style='margin-top:5px'>For example, to align across empty lines and not across comments, either\nof these work.\n\n<pre><code class='c++'>  &lt;option-name&gt;: AcrossEmptyLines\n\n  &lt;option-name&gt;:\n    Enabled: true\n    AcrossEmptyLines: true\n    AcrossComments: false\n</code></pre><p style='margin-top:5px'>From clang-format 9"
    },
    "AlignConsecutiveShortCaseStatements": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AcrossComments": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across comments.\n\n<pre><code class='c++'>  true:\n  switch (level) {\n  case log::info:    return \"info:\";\n  case log::warning: return \"warning:\";\n  /* A comment. */\n  default:           return \"\";\n  }\n\n  false:\n  switch (level) {\n  case log::info:    return \"info:\";\n  case log::warning: return \"warning:\";\n  /* A comment. */\n  default: return \"\";\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveshortcasestatements'>AlignConsecutiveShortCaseStatements Documentation</a>\n"
        },
        "AcrossEmptyLines": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across empty lines.\n\n<pre><code class='c++'>  true:\n  switch (level) {\n  case log::info:    return \"info:\";\n  case log::warning: return \"warning:\";\n\n  default:           return \"\";\n  }\n\n  false:\n  switch (level) {\n  case log::info:    return \"info:\";\n  case log::warning: return \"warning:\";\n\n  default: return \"\";\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveshortcasestatements'>AlignConsecutiveShortCaseStatements Documentation</a>\n"
        },
        "AlignCaseArrows": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align the case arrows when aligning short case expressions.\n\n<pre><code class='java'>  true:\n  i = switch (day) {\n    case THURSDAY, SATURDAY -&gt; 8;\n    case WEDNESDAY          -&gt; 9;\n    default                 -&gt; 0;\n  };\n\n  false:\n  i = switch (day) {\n    case THURSDAY, SATURDAY -&gt; 8;\n    case WEDNESDAY -&gt;          9;\n    default -&gt;                 0;\n  };\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveshortcasestatements'>AlignConsecutiveShortCaseStatements Documentation</a>\n"
        },
        "AlignCaseColons": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligned case labels are aligned on the colon, or on the tokens\nafter the colon.\n\n<pre><code class='c++'>  true:\n  switch (level) {\n  case log::info   : return \"info:\";\n  case log::warning: return \"warning:\";\n  default          : return \"\";\n  }\n\n  false:\n  switch (level) {\n  case log::info:    return \"info:\";\n  case log::warning: return \"warning:\";\n  default:           return \"\";\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveshortcasestatements'>AlignConsecutiveShortCaseStatements Documentation</a>\n"
        },
        "Enabled": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligning is enabled.\n\n<pre><code class='c++'>  true:\n  switch (level) {\n  case log::info:    return \"info:\";\n  case log::warning: return \"warning:\";\n  default:           return \"\";\n  }\n\n  false:\n  switch (level) {\n  case log::info: return \"info:\";\n  case log::warning: return \"warning:\";\n  default: return \"\";\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveshortcasestatements'>AlignConsecutiveShortCaseStatements Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutiveshortcasestatements'>AlignConsecutiveShortCaseStatements Documentation</a>\n<p style='margin-top:5px'>Style of aligning consecutive short case labels.\nOnly applies if <code>AllowShortCaseExpressionOnASingleLine</code> or\n<code>AllowShortCaseLabelsOnASingleLine</code> is <code>true</code>.\n<p style='margin-top:5px'>\n<pre><code class='yaml'>  # Example of usage:\n  AlignConsecutiveShortCaseStatements:\n    Enabled: true\n    AcrossEmptyLines: true\n    AcrossComments: true\n    AlignCaseColons: false\n</code></pre><p style='margin-top:5px'>Alignment options.\n<p style='margin-top:5px'><p style='margin-top:5px'>From clang-format 17"
    },
    "AlignConsecutiveTableGenBreakingDAGArgColons": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AcrossComments": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across comments.\n\n<pre><code class='c++'>  true:\n  int d    = 3;\n  /* A comment. */\n  double e = 4;\n\n  false:\n  int d = 3;\n  /* A comment. */\n  double e = 4;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegenbreakingdagargcolons'>AlignConsecutiveTableGenBreakingDAGArgColons Documentation</a>\n"
        },
        "AcrossEmptyLines": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across empty lines.\n\n<pre><code class='c++'>  true:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d            = 3;\n\n  false:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d = 3;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegenbreakingdagargcolons'>AlignConsecutiveTableGenBreakingDAGArgColons Documentation</a>\n"
        },
        "AlignCompound": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether compound assignments\nlike <code>+=</code> are aligned along with <code>=</code>.\n\n<pre><code class='c++'>  true:\n  a   &= 2;\n  bbb  = 2;\n\n  false:\n  a &= 2;\n  bbb = 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegenbreakingdagargcolons'>AlignConsecutiveTableGenBreakingDAGArgColons Documentation</a>\n"
        },
        "AlignFunctionDeclarations": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function declarations\nare aligned.\n\n<pre><code class='c++'>  true:\n  unsigned int f1(void);\n  void         f2(void);\n  size_t       f3(void);\n\n  false:\n  unsigned int f1(void);\n  void f2(void);\n  size_t f3(void);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegenbreakingdagargcolons'>AlignConsecutiveTableGenBreakingDAGArgColons Documentation</a>\n"
        },
        "AlignFunctionPointers": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function pointers are\naligned.\n\n<pre><code class='c++'>  true:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int      (*f)();\n\n  false:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int (*f)();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegenbreakingdagargcolons'>AlignConsecutiveTableGenBreakingDAGArgColons Documentation</a>\n"
        },
        "Enabled": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligning is enabled.\n\n<pre><code class='c++'>  #define SHORT_NAME       42\n  #define LONGER_NAME      0x007f\n  #define EVEN_LONGER_NAME (2)\n  #define foo(x)           (x * x)\n  #define bar(y, z)        (y + z)\n\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int aaaa : 1;\n  int b    : 12;\n  int ccc  : 8;\n\n  int         aaaa = 12;\n  float       b = 23;\n  std::string ccc;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegenbreakingdagargcolons'>AlignConsecutiveTableGenBreakingDAGArgColons Documentation</a>\n"
        },
        "PadOperators": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether short assignment\noperators are left-padded to the same length as long ones in order to\nput all assignment operators to the right of the left hand side.\n\n<pre><code class='c++'>  true:\n  a   &gt;&gt;= 2;\n  bbb   = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n\n  false:\n  a &gt;&gt;= 2;\n  bbb = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegenbreakingdagargcolons'>AlignConsecutiveTableGenBreakingDAGArgColons Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegenbreakingdagargcolons'>AlignConsecutiveTableGenBreakingDAGArgColons Documentation</a>\n<p style='margin-top:5px'>Style of aligning consecutive TableGen DAGArg operator colons.\nIf enabled, align the colon inside DAGArg which have line break inside.\nThis works only when TableGenBreakInsideDAGArg is BreakElements or\nBreakAll and the DAGArg is not excepted by\nTableGenBreakingDAGArgOperators's effect.\n\n<pre><code class='c++'>  let dagarg = (ins\n      a  :$src1,\n      aa :$src2,\n      aaa:$src3\n  )\n</code></pre><p style='margin-top:5px'>Alignment options.\n<p style='margin-top:5px'>They can also be read as a whole for compatibility. The choices are:\n<p style='margin-top:5px'>* <code>None</code>\n* <code>Consecutive</code>\n* <code>AcrossEmptyLines</code>\n* <code>AcrossComments</code>\n* <code>AcrossEmptyLinesAndComments</code>\n<p style='margin-top:5px'>For example, to align across empty lines and not across comments, either\nof these work.\n\n<pre><code class='c++'>  &lt;option-name&gt;: AcrossEmptyLines\n\n  &lt;option-name&gt;:\n    Enabled: true\n    AcrossEmptyLines: true\n    AcrossComments: false\n</code></pre><p style='margin-top:5px'>From clang-format 19"
    },
    "AlignConsecutiveTableGenCondOperatorColons": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AcrossComments": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across comments.\n\n<pre><code class='c++'>  true:\n  int d    = 3;\n  /* A comment. */\n  double e = 4;\n\n  false:\n  int d = 3;\n  /* A comment. */\n  double e = 4;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegencondoperatorcolons'>AlignConsecutiveTableGenCondOperatorColons Documentation</a>\n"
        },
        "AcrossEmptyLines": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across empty lines.\n\n<pre><code class='c++'>  true:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d            = 3;\n\n  false:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d = 3;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegencondoperatorcolons'>AlignConsecutiveTableGenCondOperatorColons Documentation</a>\n"
        },
        "AlignCompound": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether compound assignments\nlike <code>+=</code> are aligned along with <code>=</code>.\n\n<pre><code class='c++'>  true:\n  a   &= 2;\n  bbb  = 2;\n\n  false:\n  a &= 2;\n  bbb = 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegencondoperatorcolons'>AlignConsecutiveTableGenCondOperatorColons Documentation</a>\n"
        },
        "AlignFunctionDeclarations": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function declarations\nare aligned.\n\n<pre><code class='c++'>  true:\n  unsigned int f1(void);\n  void         f2(void);\n  size_t       f3(void);\n\n  false:\n  unsigned int f1(void);\n  void f2(void);\n  size_t f3(void);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegencondoperatorcolons'>AlignConsecutiveTableGenCondOperatorColons Documentation</a>\n"
        },
        "AlignFunctionPointers": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function pointers are\naligned.\n\n<pre><code class='c++'>  true:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int      (*f)();\n\n  false:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int (*f)();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegencondoperatorcolons'>AlignConsecutiveTableGenCondOperatorColons Documentation</a>\n"
        },
        "Enabled": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligning is enabled.\n\n<pre><code class='c++'>  #define SHORT_NAME       42\n  #define LONGER_NAME      0x007f\n  #define EVEN_LONGER_NAME (2)\n  #define foo(x)           (x * x)\n  #define bar(y, z)        (y + z)\n\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int aaaa : 1;\n  int b    : 12;\n  int ccc  : 8;\n\n  int         aaaa = 12;\n  float       b = 23;\n  std::string ccc;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegencondoperatorcolons'>AlignConsecutiveTableGenCondOperatorColons Documentation</a>\n"
        },
        "PadOperators": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether short assignment\noperators are left-padded to the same length as long ones in order to\nput all assignment operators to the right of the left hand side.\n\n<pre><code class='c++'>  true:\n  a   &gt;&gt;= 2;\n  bbb   = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n\n  false:\n  a &gt;&gt;= 2;\n  bbb = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegencondoperatorcolons'>AlignConsecutiveTableGenCondOperatorColons Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegencondoperatorcolons'>AlignConsecutiveTableGenCondOperatorColons Documentation</a>\n<p style='margin-top:5px'>Style of aligning consecutive TableGen cond operator colons.\nAlign the colons of cases inside !cond operators.\n\n<pre><code class='c++'>  !cond(!eq(size, 1) : 1,\n        !eq(size, 16): 1,\n        true         : 0)\n</code></pre><p style='margin-top:5px'>Alignment options.\n<p style='margin-top:5px'>They can also be read as a whole for compatibility. The choices are:\n<p style='margin-top:5px'>* <code>None</code>\n* <code>Consecutive</code>\n* <code>AcrossEmptyLines</code>\n* <code>AcrossComments</code>\n* <code>AcrossEmptyLinesAndComments</code>\n<p style='margin-top:5px'>For example, to align across empty lines and not across comments, either\nof these work.\n\n<pre><code class='c++'>  &lt;option-name&gt;: AcrossEmptyLines\n\n  &lt;option-name&gt;:\n    Enabled: true\n    AcrossEmptyLines: true\n    AcrossComments: false\n</code></pre><p style='margin-top:5px'>From clang-format 19"
    },
    "AlignConsecutiveTableGenDefinitionColons": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AcrossComments": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across comments.\n\n<pre><code class='c++'>  true:\n  int d    = 3;\n  /* A comment. */\n  double e = 4;\n\n  false:\n  int d = 3;\n  /* A comment. */\n  double e = 4;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegendefinitioncolons'>AlignConsecutiveTableGenDefinitionColons Documentation</a>\n"
        },
        "AcrossEmptyLines": {
          "type": "boolean",
          "x-intellij-html-description": "Whether to align across empty lines.\n\n<pre><code class='c++'>  true:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d            = 3;\n\n  false:\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int d = 3;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegendefinitioncolons'>AlignConsecutiveTableGenDefinitionColons Documentation</a>\n"
        },
        "AlignCompound": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether compound assignments\nlike <code>+=</code> are aligned along with <code>=</code>.\n\n<pre><code class='c++'>  true:\n  a   &= 2;\n  bbb  = 2;\n\n  false:\n  a &= 2;\n  bbb = 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegendefinitioncolons'>AlignConsecutiveTableGenDefinitionColons Documentation</a>\n"
        },
        "AlignFunctionDeclarations": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function declarations\nare aligned.\n\n<pre><code class='c++'>  true:\n  unsigned int f1(void);\n  void         f2(void);\n  size_t       f3(void);\n\n  false:\n  unsigned int f1(void);\n  void f2(void);\n  size_t f3(void);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegendefinitioncolons'>AlignConsecutiveTableGenDefinitionColons Documentation</a>\n"
        },
        "AlignFunctionPointers": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveDeclarations</code>. Whether function pointers are\naligned.\n\n<pre><code class='c++'>  true:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int      (*f)();\n\n  false:\n  unsigned i;\n  int     &r;\n  int     *p;\n  int (*f)();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegendefinitioncolons'>AlignConsecutiveTableGenDefinitionColons Documentation</a>\n"
        },
        "Enabled": {
          "type": "boolean",
          "x-intellij-html-description": "Whether aligning is enabled.\n\n<pre><code class='c++'>  #define SHORT_NAME       42\n  #define LONGER_NAME      0x007f\n  #define EVEN_LONGER_NAME (2)\n  #define foo(x)           (x * x)\n  #define bar(y, z)        (y + z)\n\n  int a            = 1;\n  int somelongname = 2;\n  double c         = 3;\n\n  int aaaa : 1;\n  int b    : 12;\n  int ccc  : 8;\n\n  int         aaaa = 12;\n  float       b = 23;\n  std::string ccc;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegendefinitioncolons'>AlignConsecutiveTableGenDefinitionColons Documentation</a>\n"
        },
        "PadOperators": {
          "type": "boolean",
          "x-intellij-html-description": "Only for <code>AlignConsecutiveAssignments</code>.  Whether short assignment\noperators are left-padded to the same length as long ones in order to\nput all assignment operators to the right of the left hand side.\n\n<pre><code class='c++'>  true:\n  a   &gt;&gt;= 2;\n  bbb   = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n\n  false:\n  a &gt;&gt;= 2;\n  bbb = 2;\n\n  a     = 2;\n  bbb &gt;&gt;= 2;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegendefinitioncolons'>AlignConsecutiveTableGenDefinitionColons Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignconsecutivetablegendefinitioncolons'>AlignConsecutiveTableGenDefinitionColons Documentation</a>\n<p style='margin-top:5px'>Style of aligning consecutive TableGen definition colons.\nThis aligns the inheritance colons of consecutive definitions.\n\n<pre><code class='c++'>  def Def       : Parent {}\n  def DefDef    : Parent {}\n  def DefDefDef : Parent {}\n</code></pre><p style='margin-top:5px'>Alignment options.\n<p style='margin-top:5px'>They can also be read as a whole for compatibility. The choices are:\n<p style='margin-top:5px'>* <code>None</code>\n* <code>Consecutive</code>\n* <code>AcrossEmptyLines</code>\n* <code>AcrossComments</code>\n* <code>AcrossEmptyLinesAndComments</code>\n<p style='margin-top:5px'>For example, to align across empty lines and not across comments, either\nof these work.\n\n<pre><code class='c++'>  &lt;option-name&gt;: AcrossEmptyLines\n\n  &lt;option-name&gt;:\n    Enabled: true\n    AcrossEmptyLines: true\n    AcrossComments: false\n</code></pre><p style='margin-top:5px'>From clang-format 19"
    },
    "AlignEscapedNewlines": {
      "type": "string",
      "enum": [
        "DontAlign",
        "Left",
        "LeftWithLastLine",
        "Right"
      ],
      "x-intellij-enum-metadata": {
        "DontAlign": {
          "description": "Don't align escaped newlines."
        },
        "Left": {
          "description": "Align escaped newlines as far left as possible."
        },
        "LeftWithLastLine": {
          "description": "Align escaped newlines as far left as possible, using the last line of"
        },
        "Right": {
          "description": "Align escaped newlines in the right-most column."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignescapednewlines'>AlignEscapedNewlines Documentation</a>\n<p style='margin-top:5px'>Options for aligning backslashes in escaped newlines.<p style='margin-top:5px'>From clang-format 5<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AlignOperands": {
      "type": "string",
      "enum": [
        "DontAlign",
        "Align",
        "AlignAfterOperator"
      ],
      "x-intellij-enum-metadata": {
        "DontAlign": {
          "description": "Do not align operands of binary and ternary expressions."
        },
        "Align": {
          "description": "Horizontally align operands of binary and ternary expressions."
        },
        "AlignAfterOperator": {
          "description": "Horizontally align operands of binary and ternary expressions."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alignoperands'>AlignOperands Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, horizontally align operands of binary and ternary\nexpressions.<p style='margin-top:5px'>From clang-format 3.5<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AlignTrailingComments": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Kind": {
          "x-intellij-html-description": "Specifies the way to align trailing comments.\n<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#aligntrailingcomments'>AlignTrailingComments Documentation</a>\n"
        },
        "OverEmptyLines": {
          "type": "number",
          "x-intellij-html-description": "How many empty lines to apply alignment.\nWhen both <code>MaxEmptyLinesToKeep</code> and <code>OverEmptyLines</code> are set to 2,\nit formats like below.\n\n<pre><code class='c++'>  int a;      // all these\n\n  int ab;     // comments are\n\n\n  int abcdef; // aligned\n</code></pre>\n<p style='margin-top:5px'>When <code>MaxEmptyLinesToKeep</code> is set to 2 and <code>OverEmptyLines</code> is set\nto 1, it formats like below.\n\n<pre><code class='c++'>  int a;  // these are\n\n  int ab; // aligned\n\n\n  int abcdef; // but this isn't\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#aligntrailingcomments'>AlignTrailingComments Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#aligntrailingcomments'>AlignTrailingComments Documentation</a>\n<p style='margin-top:5px'>Control of trailing comments.\n<p style='margin-top:5px'>The alignment stops at closing braces after a line break, and only\nfollowed by other closing braces, a (<code>do-</code>) <code>while</code>, a lambda call, or\na semicolon.\n<p style='margin-top:5px'><b>Note</b> As of clang-format 16 this option is not a bool but can be set\n to the options. Conventional bool options still can be parsed as before.\n<p style='margin-top:5px'>\n<pre><code class='yaml'>  # Example of usage:\n  AlignTrailingComments:\n    Kind: Always\n    OverEmptyLines: 2\n</code></pre><p style='margin-top:5px'>Alignment options<p style='margin-top:5px'>From clang-format 3.7"
    },
    "AllowAllArgumentsOnNextLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowallargumentsonnextline'>AllowAllArgumentsOnNextLine Documentation</a>\n<p style='margin-top:5px'>If a function call or braced initializer list doesn't fit on a\nline, allow putting all arguments onto the next line, even if\n<code>BinPackArguments</code> is <code>false</code>.\n\n<pre><code class='c++'>  true:\n  callFunction(\n      a, b, c, d);\n\n  false:\n  callFunction(a,\n               b,\n               c,\n               d);\n</code></pre><p style='margin-top:5px'>From clang-format 9"
    },
    "AllowAllConstructorInitializersOnNextLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowallconstructorinitializersonnextline'>AllowAllConstructorInitializersOnNextLine Documentation</a>\n<p style='margin-top:5px'>This option is **deprecated**. See <code>NextLine</code> of\n<code>PackConstructorInitializers</code>.<p style='margin-top:5px'>From clang-format 9",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "AllowAllParametersOfDeclarationOnNextLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowallparametersofdeclarationonnextline'>AllowAllParametersOfDeclarationOnNextLine Documentation</a>\n<p style='margin-top:5px'>If the function declaration doesn't fit on a line,\nallow putting all parameters of a function declaration onto\nthe next line even if <code>BinPackParameters</code> is <code>OnePerLine</code>.\n\n<pre><code class='c++'>  true:\n  void myFunction(\n      int a, int b, int c, int d, int e);\n\n  false:\n  void myFunction(int a,\n                  int b,\n                  int c,\n                  int d,\n                  int e);\n</code></pre><p style='margin-top:5px'>From clang-format 3.3"
    },
    "AllowBreakBeforeNoexceptSpecifier": {
      "type": "string",
      "enum": [
        "Never",
        "OnlyWithParen",
        "Always"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "No line break allowed."
        },
        "OnlyWithParen": {
          "description": "For a simple 'noexcept' there is no line break allowed, but when we"
        },
        "Always": {
          "description": "Line breaks are allowed. But note that because of the associated"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowbreakbeforenoexceptspecifier'>AllowBreakBeforeNoexceptSpecifier Documentation</a>\n<p style='margin-top:5px'>Controls if there could be a line break before a <code>noexcept</code> specifier.<p style='margin-top:5px'>From clang-format 18<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AllowShortBlocksOnASingleLine": {
      "type": "string",
      "enum": [
        "Never",
        "Empty",
        "Always"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Never merge blocks into a single line."
        },
        "Empty": {
          "description": "Only merge empty blocks."
        },
        "Always": {
          "description": "Always merge short blocks into a single line."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortblocksonasingleline'>AllowShortBlocksOnASingleLine Documentation</a>\n<p style='margin-top:5px'>Dependent on the value, <code>while (true) { continue; }</code> can be put on a\nsingle line.<p style='margin-top:5px'>From clang-format 3.5<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AllowShortCaseExpressionOnASingleLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortcaseexpressiononasingleline'>AllowShortCaseExpressionOnASingleLine Documentation</a>\n<p style='margin-top:5px'>Whether to merge a short switch labeled rule into a single line.\n\n<pre><code class='java'>  true:                               false:\n  switch (a) {           vs.          switch (a) {\n  case 1 -&gt; 1;                        case 1 -&gt;\n  default -&gt; 0;                         1;\n  };                                  default -&gt;\n                                        0;\n                                      };\n</code></pre><p style='margin-top:5px'>From clang-format 19"
    },
    "AllowShortCaseLabelsOnASingleLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortcaselabelsonasingleline'>AllowShortCaseLabelsOnASingleLine Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, short case labels will be contracted to a single line.\n\n<pre><code class='c++'>  true:                                   false:\n  switch (a) {                    vs.     switch (a) {\n  case 1: x = 1; break;                   case 1:\n  case 2: return;                           x = 1;\n  }                                         break;\n                                          case 2:\n                                            return;\n                                          }\n</code></pre><p style='margin-top:5px'>From clang-format 3.6"
    },
    "AllowShortCompoundRequirementOnASingleLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortcompoundrequirementonasingleline'>AllowShortCompoundRequirementOnASingleLine Documentation</a>\n<p style='margin-top:5px'>Allow short compound requirement on a single line.\n\n<pre><code class='c++'>  true:\n  template &lt;typename T&gt;\n  concept c = requires(T x) {\n    { x + 1 } -&gt; std::same_as&lt;int&gt;;\n  };\n\n  false:\n  template &lt;typename T&gt;\n  concept c = requires(T x) {\n    {\n      x + 1\n    } -&gt; std::same_as&lt;int&gt;;\n  };\n</code></pre><p style='margin-top:5px'>From clang-format 18"
    },
    "AllowShortEnumsOnASingleLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortenumsonasingleline'>AllowShortEnumsOnASingleLine Documentation</a>\n<p style='margin-top:5px'>Allow short enums on a single line.\n\n<pre><code class='c++'>  true:\n  enum { A, B } myEnum;\n\n  false:\n  enum {\n    A,\n    B\n  } myEnum;\n</code></pre><p style='margin-top:5px'>From clang-format 11"
    },
    "AllowShortFunctionsOnASingleLine": {
      "type": "string",
      "enum": [
        "None",
        "InlineOnly",
        "Empty",
        "Inline",
        "All"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "Never merge functions into a single line."
        },
        "InlineOnly": {
          "description": "Only merge functions defined inside a class. Same as 'inline',"
        },
        "Empty": {
          "description": "Only merge empty functions."
        },
        "Inline": {
          "description": "Only merge functions defined inside a class. Implies 'empty'."
        },
        "All": {
          "description": "Merge all functions fitting on a single line."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortfunctionsonasingleline'>AllowShortFunctionsOnASingleLine Documentation</a>\n<p style='margin-top:5px'>Dependent on the value, <code>int f() { return 0; }</code> can be put on a\nsingle line.<p style='margin-top:5px'>From clang-format 3.5<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AllowShortIfStatementsOnASingleLine": {
      "type": "string",
      "enum": [
        "Never",
        "WithoutElse",
        "OnlyFirstIf",
        "AllIfsAndElse"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Never put short ifs on the same line."
        },
        "WithoutElse": {
          "description": "Put short ifs on the same line only if there is no else statement."
        },
        "OnlyFirstIf": {
          "description": "Put short ifs, but not else ifs nor else statements, on the same line."
        },
        "AllIfsAndElse": {
          "description": "Always put short ifs, else ifs and else statements on the same"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortifstatementsonasingleline'>AllowShortIfStatementsOnASingleLine Documentation</a>\n<p style='margin-top:5px'>Dependent on the value, <code>if (a) return;</code> can be put on a single line.<p style='margin-top:5px'>From clang-format 3.3<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AllowShortLambdasOnASingleLine": {
      "type": "string",
      "enum": [
        "None",
        "Empty",
        "Inline",
        "All"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "Never merge lambdas into a single line."
        },
        "Empty": {
          "description": "Only merge empty lambdas."
        },
        "Inline": {
          "description": "Merge lambda into a single line if the lambda is argument of a function."
        },
        "All": {
          "description": "Merge all lambdas fitting on a single line."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortlambdasonasingleline'>AllowShortLambdasOnASingleLine Documentation</a>\n<p style='margin-top:5px'>Dependent on the value, <code>auto lambda []() { return 0; }</code> can be put on a\nsingle line.<p style='margin-top:5px'>From clang-format 9<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "AllowShortLoopsOnASingleLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortloopsonasingleline'>AllowShortLoopsOnASingleLine Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, <code>while (true) continue;</code> can be put on a single\nline.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "AllowShortNamespacesOnASingleLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#allowshortnamespacesonasingleline'>AllowShortNamespacesOnASingleLine Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, <code>namespace a { class b; }</code> can be put on a single line.<p style='margin-top:5px'>From clang-format 20"
    },
    "AlwaysBreakAfterDefinitionReturnType": {
      "type": "string",
      "enum": [
        "None",
        "All",
        "TopLevel"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "Break after return type automatically."
        },
        "All": {
          "description": "Always break after the return type."
        },
        "TopLevel": {
          "description": "Always break after the return types of top-level functions."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alwaysbreakafterdefinitionreturntype'>AlwaysBreakAfterDefinitionReturnType Documentation</a>\n<p style='margin-top:5px'>The function definition return type breaking style to use.  This\noption is **deprecated** and is retained for backwards compatibility.<p style='margin-top:5px'>From clang-format 3.7<p style='margin-top:5px'>Invoke completion to see all options",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "AlwaysBreakAfterReturnType": {
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alwaysbreakafterreturntype'>AlwaysBreakAfterReturnType Documentation</a>\n<p style='margin-top:5px'>This option is renamed to <code>BreakAfterReturnType</code>.<p style='margin-top:5px'>From clang-format 3.8",
      "deprecated": true,
      "deprecationMessage": "This option is renamed to 'BreakAfterReturnType'."
    },
    "AlwaysBreakBeforeMultilineStrings": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alwaysbreakbeforemultilinestrings'>AlwaysBreakBeforeMultilineStrings Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, always break before multiline string literals.\n<p style='margin-top:5px'>This flag is mean to make cases where there are multiple multiline strings\nin a file look more consistent. Thus, it will only take effect if wrapping\nthe string at that point leads to it being indented\n<code>ContinuationIndentWidth</code> spaces from the start of the line.\n\n<pre><code class='c++'>   true:                                  false:\n   aaaa =                         vs.     aaaa = \"bbbb\"\n       \"bbbb\"                                    \"cccc\";\n       \"cccc\";\n</code></pre><p style='margin-top:5px'>From clang-format 3.4"
    },
    "AlwaysBreakTemplateDeclarations": {
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#alwaysbreaktemplatedeclarations'>AlwaysBreakTemplateDeclarations Documentation</a>\n<p style='margin-top:5px'>This option is renamed to <code>BreakTemplateDeclarations</code>.<p style='margin-top:5px'>From clang-format 3.4",
      "deprecated": true,
      "deprecationMessage": "This option is renamed to 'BreakTemplateDeclarations'."
    },
    "AttributeMacros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#attributemacros'>AttributeMacros Documentation</a>\n<p style='margin-top:5px'>A vector of strings that should be interpreted as attributes/qualifiers\ninstead of identifiers. This can be useful for language extensions or\nstatic analyzer annotations.\n<p style='margin-top:5px'>For example:\n\n<pre><code class='c++'>  x = (char *__capability)&y;\n  int function(void) __unused;\n  void only_writes_to_buffer(char *__output buffer);\n</code></pre>\n<p style='margin-top:5px'>In the .clang-format configuration file, this can be configured like:\n\n<pre><code class='yaml'>  AttributeMacros: [__capability, __output, __unused]\n</code></pre>\n<p style='margin-top:5px'><p style='margin-top:5px'>From clang-format 12"
    },
    "BinPackArguments": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#binpackarguments'>BinPackArguments Documentation</a>\n<p style='margin-top:5px'>If <code>false</code>, a function call's arguments will either be all on the\nsame line or will have one line each.\n\n<pre><code class='c++'>  true:\n  void f() {\n    f(aaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaa,\n      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa);\n  }\n\n  false:\n  void f() {\n    f(aaaaaaaaaaaaaaaaaaaa,\n      aaaaaaaaaaaaaaaaaaaa,\n      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa);\n  }\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "BinPackParameters": {
      "type": "string",
      "enum": [
        "BinPack",
        "OnePerLine",
        "AlwaysOnePerLine"
      ],
      "x-intellij-enum-metadata": {
        "BinPack": {
          "description": "Bin-pack parameters."
        },
        "OnePerLine": {
          "description": "Put all parameters on the current line if they fit."
        },
        "AlwaysOnePerLine": {
          "description": "Always put each parameter on its own line."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#binpackparameters'>BinPackParameters Documentation</a>\n<p style='margin-top:5px'>The bin pack parameters style to use.<p style='margin-top:5px'>From clang-format 3.7<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BitFieldColonSpacing": {
      "type": "string",
      "enum": [
        "Both",
        "None",
        "Before",
        "After"
      ],
      "x-intellij-enum-metadata": {
        "Both": {
          "description": "Add one space on each side of the ':'"
        },
        "None": {
          "description": "Add no space around the ':' (except when needed for"
        },
        "Before": {
          "description": "Add space before the ':' only"
        },
        "After": {
          "description": "Add space after the ':' only (space may be added before if"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bitfieldcolonspacing'>BitFieldColonSpacing Documentation</a>\n<p style='margin-top:5px'>The BitFieldColonSpacingStyle to use for bitfields.<p style='margin-top:5px'>From clang-format 12<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BraceWrapping": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AfterControlStatement": {
          "x-intellij-html-description": "Wrap control statements (<code>if</code>/<code>for</code>/<code>while</code>/<code>switch</code>/..).\n<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterCaseLabel": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap case labels.\n\n<pre><code class='c++'>  false:                                true:\n  switch (foo) {                vs.     switch (foo) {\n    case 1: {                             case 1:\n      bar();                              {\n      break;                                bar();\n    }                                       break;\n    default: {                            }\n      plop();                             default:\n    }                                     {\n  }                                         plop();\n                                          }\n                                        }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterClass": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap class definitions.\n\n<pre><code class='c++'>  true:\n  class foo\n  {};\n\n  false:\n  class foo {};\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterEnum": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap enum definitions.\n\n<pre><code class='c++'>  true:\n  enum X : int\n  {\n    B\n  };\n\n  false:\n  enum X : int { B };\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterExternBlock": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap extern blocks.\n\n<pre><code class='c++'>  true:\n  extern \"C\"\n  {\n    int foo();\n  }\n\n  false:\n  extern \"C\" {\n  int foo();\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterFunction": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap function definitions.\n\n<pre><code class='c++'>  true:\n  void foo()\n  {\n    bar();\n    bar2();\n  }\n\n  false:\n  void foo() {\n    bar();\n    bar2();\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterNamespace": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap namespace definitions.\n\n<pre><code class='c++'>  true:\n  namespace\n  {\n  int foo();\n  int bar();\n  }\n\n  false:\n  namespace {\n  int foo();\n  int bar();\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterObjCDeclaration": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap ObjC definitions (interfaces, implementations...).\n<b>Note</b> @autoreleasepool and @synchronized blocks are wrapped\n according to <code>AfterControlStatement</code> flag.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterStruct": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap struct definitions.\n\n<pre><code class='c++'>  true:\n  struct foo\n  {\n    int x;\n  };\n\n  false:\n  struct foo {\n    int x;\n  };\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "AfterUnion": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap union definitions.\n\n<pre><code class='c++'>  true:\n  union foo\n  {\n    int x;\n  }\n\n  false:\n  union foo {\n    int x;\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "BeforeCatch": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap before <code>catch</code>.\n\n<pre><code class='c++'>  true:\n  try {\n    foo();\n  }\n  catch () {\n  }\n\n  false:\n  try {\n    foo();\n  } catch () {\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "BeforeElse": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap before <code>else</code>.\n\n<pre><code class='c++'>  true:\n  if (foo()) {\n  }\n  else {\n  }\n\n  false:\n  if (foo()) {\n  } else {\n  }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "BeforeLambdaBody": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap lambda block.\n\n<pre><code class='c++'>  true:\n  connect(\n    []()\n    {\n      foo();\n      bar();\n    });\n\n  false:\n  connect([]() {\n    foo();\n    bar();\n  });\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "BeforeWhile": {
          "type": "boolean",
          "x-intellij-html-description": "Wrap before <code>while</code>.\n\n<pre><code class='c++'>  true:\n  do {\n    foo();\n  }\n  while (1);\n\n  false:\n  do {\n    foo();\n  } while (1);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "IndentBraces": {
          "type": "boolean",
          "x-intellij-html-description": "Indent the wrapped braces themselves.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "SplitEmptyFunction": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>false</code>, empty function body can be put on a single line.\nThis option is used only if the opening brace of the function has\nalready been wrapped, i.e. the <code>AfterFunction</code> brace wrapping mode is\nset, and the function could/should not be put on a single line (as per\n<code>AllowShortFunctionsOnASingleLine</code> and constructor formatting\noptions).\n\n<pre><code class='c++'>  false:          true:\n  int f()   vs.   int f()\n  {}              {\n                  }\n</code></pre>\n<p style='margin-top:5px'><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "SplitEmptyNamespace": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>false</code>, empty namespace body can be put on a single line.\nThis option is used only if the opening brace of the namespace has\nalready been wrapped, i.e. the <code>AfterNamespace</code> brace wrapping mode is\nset.\n\n<pre><code class='c++'>  false:               true:\n  namespace Foo   vs.  namespace Foo\n  {}                   {\n                       }\n</code></pre>\n<p style='margin-top:5px'><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        },
        "SplitEmptyRecord": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>false</code>, empty record (e.g. class, struct or union) body\ncan be put on a single line. This option is used only if the opening\nbrace of the record has already been wrapped, i.e. the <code>AfterClass</code>\n(for classes) brace wrapping mode is set.\n\n<pre><code class='c++'>  false:           true:\n  class Foo   vs.  class Foo\n  {}               {\n                   }\n</code></pre>\n<p style='margin-top:5px'><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracewrapping'>BraceWrapping Documentation</a>\n<p style='margin-top:5px'>Control of individual brace wrapping cases.\n<p style='margin-top:5px'>If <code>BreakBeforeBraces</code> is set to <code>Custom</code>, use this to specify how\neach individual brace case should be handled. Otherwise, this is ignored.\n\n<pre><code class='yaml'>  # Example of usage:\n  BreakBeforeBraces: Custom\n  BraceWrapping:\n    AfterEnum: true\n    AfterStruct: false\n    SplitEmptyFunction: false\n</code></pre><p style='margin-top:5px'>Precise control over the wrapping of braces.\n\n<pre><code class='c++'>  # Should be declared this way:\n  BreakBeforeBraces: Custom\n  BraceWrapping:\n      AfterClass: true\n</code></pre><p style='margin-top:5px'>From clang-format 3.8"
    },
    "BracedInitializerIndentWidth": {
      "type": {
        "type": "number"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#bracedinitializerindentwidth'>BracedInitializerIndentWidth Documentation</a>\n<p style='margin-top:5px'>The number of columns to use to indent the contents of braced init lists.\nIf unset, <code>ContinuationIndentWidth</code> is used.\n\n<pre><code class='c++'>  AlignAfterOpenBracket: AlwaysBreak\n  BracedInitializerIndentWidth: 2\n\n  void f() {\n    SomeClass c{\n      \"foo\",\n      \"bar\",\n      \"baz\",\n    };\n    auto s = SomeStruct{\n      .foo = \"foo\",\n      .bar = \"bar\",\n      .baz = \"baz\",\n    };\n    SomeArrayT a[3] = {\n      {\n        foo,\n        bar,\n      },\n      {\n        foo,\n        bar,\n      },\n      SomeArrayT{},\n    };\n  }\n</code></pre><p style='margin-top:5px'>From clang-format 17"
    },
    "BreakAdjacentStringLiterals": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakadjacentstringliterals'>BreakAdjacentStringLiterals Documentation</a>\n<p style='margin-top:5px'>Break between adjacent string literals.\n\n<pre><code class='c++'>   true:\n   return \"Code\"\n          \"\\0\\52\\26\\55\\55\\0\"\n          \"x013\"\n          \"\\02\\xBA\";\n   false:\n   return \"Code\" \"\\0\\52\\26\\55\\55\\0\" \"x013\" \"\\02\\xBA\";\n</code></pre><p style='margin-top:5px'>From clang-format 18"
    },
    "BreakAfterAttributes": {
      "type": "string",
      "enum": [
        "Always",
        "Leave",
        "Never"
      ],
      "x-intellij-enum-metadata": {
        "Always": {
          "description": "Always break after attributes."
        },
        "Leave": {
          "description": "Leave the line breaking after attributes as is."
        },
        "Never": {
          "description": "Never break after attributes."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakafterattributes'>BreakAfterAttributes Documentation</a>\n<p style='margin-top:5px'>Break after a group of C++11 attributes before variable or function\n(including constructor/destructor) declaration/definition names or before\ncontrol statements, i.e. <code>if</code>, <code>switch</code> (including <code>case</code> and\n<code>default</code> labels), <code>for</code>, and <code>while</code> statements.<p style='margin-top:5px'>From clang-format 16<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakAfterJavaFieldAnnotations": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakafterjavafieldannotations'>BreakAfterJavaFieldAnnotations Documentation</a>\n<p style='margin-top:5px'>Break after each annotation on a field in Java files.\n\n<pre><code class='java'>   true:                                  false:\n   @Partial                       vs.     @Partial @Mock DataLoad loader;\n   @Mock\n   DataLoad loader;\n</code></pre><p style='margin-top:5px'>From clang-format 3.8"
    },
    "BreakAfterReturnType": {
      "type": "string",
      "enum": [
        "None",
        "Automatic",
        "ExceptShortType",
        "All",
        "TopLevel",
        "AllDefinitions",
        "TopLevelDefinitions"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "This is deprecated. See 'Automatic' below."
        },
        "Automatic": {
          "description": "Break after return type based on 'PenaltyReturnTypeOnItsOwnLine'."
        },
        "ExceptShortType": {
          "description": "Same as 'Automatic' above, except that there is no break after short"
        },
        "All": {
          "description": "Always break after the return type."
        },
        "TopLevel": {
          "description": "Always break after the return types of top-level functions."
        },
        "AllDefinitions": {
          "description": "Always break after the return type of function definitions."
        },
        "TopLevelDefinitions": {
          "description": "Always break after the return type of top-level definitions."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakafterreturntype'>BreakAfterReturnType Documentation</a>\n<p style='margin-top:5px'>The function declaration return type breaking style to use.<p style='margin-top:5px'>From clang-format 19<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakArrays": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakarrays'>BreakArrays Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, clang-format will always break after a Json array <code>[</code>\notherwise it will scan until the closing <code>]</code> to determine if it should\nadd newlines between elements (prettier compatible).\n<p style='margin-top:5px'><b>Note</b> This is currently only for formatting JSON.\n\n<pre><code class='c++'>   true:                                  false:\n   [                          vs.      [1, 2, 3, 4]\n     1,\n     2,\n     3,\n     4\n   ]\n</code></pre><p style='margin-top:5px'>From clang-format 16"
    },
    "BreakBeforeBinaryOperators": {
      "type": "string",
      "enum": [
        "None",
        "NonAssignment",
        "All"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "Break after operators."
        },
        "NonAssignment": {
          "description": "Break before operators that aren't assignments."
        },
        "All": {
          "description": "Break before operators."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakbeforebinaryoperators'>BreakBeforeBinaryOperators Documentation</a>\n<p style='margin-top:5px'>The way to wrap binary operators.<p style='margin-top:5px'>From clang-format 3.6<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakBeforeBraces": {
      "type": "string",
      "enum": [
        "Attach",
        "Linux",
        "Mozilla",
        "Stroustrup",
        "Allman",
        "Whitesmiths",
        "GNU",
        "WebKit",
        "Custom"
      ],
      "x-intellij-enum-metadata": {
        "Attach": {
          "description": "Always attach braces to surrounding context."
        },
        "Linux": {
          "description": "Like 'Attach', but break before braces on function, namespace and"
        },
        "Mozilla": {
          "description": "Like 'Attach', but break before braces on enum, function, and record"
        },
        "Stroustrup": {
          "description": "Like 'Attach', but break before function definitions, 'catch', and"
        },
        "Allman": {
          "description": "Always break before braces."
        },
        "Whitesmiths": {
          "description": "Like 'Allman' but always indent braces and line up code with braces."
        },
        "GNU": {
          "description": "Always break before braces and add an extra level of indentation to"
        },
        "WebKit": {
          "description": "Like 'Attach', but break before functions."
        },
        "Custom": {
          "description": "Configure each individual brace in 'BraceWrapping'."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakbeforebraces'>BreakBeforeBraces Documentation</a>\n<p style='margin-top:5px'>The brace breaking style to use.<p style='margin-top:5px'>From clang-format 3.7<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakBeforeConceptDeclarations": {
      "type": "string",
      "enum": [
        "Never",
        "Allowed",
        "Always"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Keep the template declaration line together with 'concept'."
        },
        "Allowed": {
          "description": "Breaking between template declaration and 'concept' is allowed. The"
        },
        "Always": {
          "description": "Always break before 'concept', putting it in the line after the"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakbeforeconceptdeclarations'>BreakBeforeConceptDeclarations Documentation</a>\n<p style='margin-top:5px'>The concept declaration style to use.<p style='margin-top:5px'>From clang-format 12<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakBeforeInlineASMColon": {
      "type": "string",
      "enum": [
        "Never",
        "OnlyMultiline",
        "Always"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "No break before inline ASM colon."
        },
        "OnlyMultiline": {
          "description": "Break before inline ASM colon if the line length is longer than column"
        },
        "Always": {
          "description": "Always break before inline ASM colon."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakbeforeinlineasmcolon'>BreakBeforeInlineASMColon Documentation</a>\n<p style='margin-top:5px'>The inline ASM colon style to use.<p style='margin-top:5px'>From clang-format 16<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakBeforeTernaryOperators": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakbeforeternaryoperators'>BreakBeforeTernaryOperators Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, ternary operators will be placed after line breaks.\n\n<pre><code class='c++'>   true:\n   veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription\n       ? firstValue\n       : SecondValueVeryVeryVeryVeryLong;\n\n   false:\n   veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription ?\n       firstValue :\n       SecondValueVeryVeryVeryVeryLong;\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "BreakBinaryOperations": {
      "type": "string",
      "enum": [
        "Never",
        "OnePerLine",
        "RespectPrecedence"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Don't break binary operations"
        },
        "OnePerLine": {
          "description": "Binary operations will either be all on the same line, or each operation"
        },
        "RespectPrecedence": {
          "description": "Binary operations of a particular precedence that exceed the column"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakbinaryoperations'>BreakBinaryOperations Documentation</a>\n<p style='margin-top:5px'>The break binary operations style to use.<p style='margin-top:5px'>From clang-format 20<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakConstructorInitializers": {
      "type": "string",
      "enum": [
        "BeforeColon",
        "BeforeComma",
        "AfterColon"
      ],
      "x-intellij-enum-metadata": {
        "BeforeColon": {
          "description": "Break constructor initializers before the colon and after the commas."
        },
        "BeforeComma": {
          "description": "Break constructor initializers before the colon and commas, and align"
        },
        "AfterColon": {
          "description": "Break constructor initializers after the colon and commas."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakconstructorinitializers'>BreakConstructorInitializers Documentation</a>\n<p style='margin-top:5px'>The break constructor initializers style to use.<p style='margin-top:5px'>From clang-format 5<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakFunctionDefinitionParameters": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakfunctiondefinitionparameters'>BreakFunctionDefinitionParameters Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, clang-format will always break before function definition\nparameters.\n\n<pre><code class='c++'>   true:\n   void functionDefinition(\n            int A, int B) {}\n\n   false:\n   void functionDefinition(int A, int B) {}\n\n</code></pre><p style='margin-top:5px'>From clang-format 19"
    },
    "BreakInheritanceList": {
      "type": "string",
      "enum": [
        "BeforeColon",
        "BeforeComma",
        "AfterColon",
        "AfterComma"
      ],
      "x-intellij-enum-metadata": {
        "BeforeColon": {
          "description": "Break inheritance list before the colon and after the commas."
        },
        "BeforeComma": {
          "description": "Break inheritance list before the colon and commas, and align"
        },
        "AfterColon": {
          "description": "Break inheritance list after the colon and commas."
        },
        "AfterComma": {
          "description": "Break inheritance list only after the commas."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakinheritancelist'>BreakInheritanceList Documentation</a>\n<p style='margin-top:5px'>The inheritance list style to use.<p style='margin-top:5px'>From clang-format 7<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "BreakStringLiterals": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breakstringliterals'>BreakStringLiterals Documentation</a>\n<p style='margin-top:5px'>Allow breaking string literals when formatting.\n<p style='margin-top:5px'>In C, C++, and Objective-C:\n\n<pre><code class='c++'>   true:\n   const char* x = \"veryVeryVeryVeryVeryVe\"\n                   \"ryVeryVeryVeryVeryVery\"\n                   \"VeryLongString\";\n\n   false:\n   const char* x =\n       \"veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString\";\n</code></pre>\n<p style='margin-top:5px'>In C# and Java:\n\n<pre><code class='c++'>   true:\n   string x = \"veryVeryVeryVeryVeryVe\" +\n              \"ryVeryVeryVeryVeryVery\" +\n              \"VeryLongString\";\n\n   false:\n   string x =\n       \"veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString\";\n</code></pre>\n<p style='margin-top:5px'>C# interpolated strings are not broken.\n<p style='margin-top:5px'>In Verilog:\n\n<pre><code class='c++'>   true:\n   string x = {\"veryVeryVeryVeryVeryVe\",\n               \"ryVeryVeryVeryVeryVery\",\n               \"VeryLongString\"};\n\n   false:\n   string x =\n       \"veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString\";\n</code></pre>\n<p style='margin-top:5px'><p style='margin-top:5px'>From clang-format 3.9"
    },
    "BreakTemplateDeclarations": {
      "type": "string",
      "enum": [
        "Leave",
        "No",
        "MultiLine",
        "Yes"
      ],
      "x-intellij-enum-metadata": {
        "Leave": {
          "description": "Do not change the line breaking before the declaration."
        },
        "No": {
          "description": "Do not force break before declaration."
        },
        "MultiLine": {
          "description": "Force break after template declaration only when the following"
        },
        "Yes": {
          "description": "Always break after template declaration."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#breaktemplatedeclarations'>BreakTemplateDeclarations Documentation</a>\n<p style='margin-top:5px'>The template declaration breaking style to use.<p style='margin-top:5px'>From clang-format 19<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "ColumnLimit": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#columnlimit'>ColumnLimit Documentation</a>\n<p style='margin-top:5px'>The column limit.\n<p style='margin-top:5px'>A column limit of <code>0</code> means that there is no column limit. In this case,\nclang-format will respect the input's line breaking decisions within\nstatements unless they contradict other rules.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "CommentPragmas": {
      "type": "string",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#commentpragmas'>CommentPragmas Documentation</a>\n<p style='margin-top:5px'>A regular expression that describes comments with special meaning,\nwhich should not be split into lines or otherwise changed.\n\n<pre><code class='c++'>   // CommentPragmas: '^ FOOBAR pragma:'\n   // Will leave the following line unaffected\n   #include &lt;vector&gt; // FOOBAR pragma: keep\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "CompactNamespaces": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#compactnamespaces'>CompactNamespaces Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, consecutive namespace declarations will be on the same\nline. If <code>false</code>, each namespace is declared on a new line.\n\n<pre><code class='c++'>  true:\n  namespace Foo { namespace Bar {\n  }}\n\n  false:\n  namespace Foo {\n  namespace Bar {\n  }\n  }\n</code></pre>\n<p style='margin-top:5px'>If it does not fit on a single line, the overflowing namespaces get\nwrapped:\n\n<pre><code class='c++'>  namespace Foo { namespace Bar {\n  namespace Extra {\n  }}}\n</code></pre><p style='margin-top:5px'>From clang-format 5"
    },
    "ConstructorInitializerAllOnOneLineOrOnePerLine": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#constructorinitializerallononelineoroneperline'>ConstructorInitializerAllOnOneLineOrOnePerLine Documentation</a>\n<p style='margin-top:5px'>This option is **deprecated**. See <code>CurrentLine</code> of\n<code>PackConstructorInitializers</code>.<p style='margin-top:5px'>From clang-format 3.7",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "ConstructorInitializerIndentWidth": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#constructorinitializerindentwidth'>ConstructorInitializerIndentWidth Documentation</a>\n<p style='margin-top:5px'>The number of characters to use for indentation of constructor\ninitializer lists as well as inheritance lists.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "ContinuationIndentWidth": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#continuationindentwidth'>ContinuationIndentWidth Documentation</a>\n<p style='margin-top:5px'>Indent width for line continuations.\n\n<pre><code class='c++'>   ContinuationIndentWidth: 2\n\n   int i =         //  VeryVeryVeryVeryVeryLongComment\n     longFunction( // Again a long comment\n       arg);\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "Cpp11BracedListStyle": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#cpp11bracedliststyle'>Cpp11BracedListStyle Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, format braced lists as best suited for C++11 braced\nlists.\n<p style='margin-top:5px'>Important differences:\n<p style='margin-top:5px'>* No spaces inside the braced list.\n* No line break before the closing brace.\n* Indentation with the continuation indent, not with the block indent.\n<p style='margin-top:5px'>Fundamentally, C++11 braced lists are formatted exactly like function\ncalls would be formatted in their place. If the braced list follows a name\n(e.g. a type or variable name), clang-format formats as if the <code>{}</code> were\nthe parentheses of a function call with that name. If there is no name,\na zero-length name is assumed.\n\n<pre><code class='c++'>   true:                                  false:\n   vector&lt;int&gt; x{1, 2, 3, 4};     vs.     vector&lt;int&gt; x{ 1, 2, 3, 4 };\n   vector&lt;T&gt; x{{}, {}, {}, {}};           vector&lt;T&gt; x{ {}, {}, {}, {} };\n   f(MyMap[{composite, key}]);            f(MyMap[{ composite, key }]);\n   new int[3]{1, 2, 3};                   new int[3]{ 1, 2, 3 };\n</code></pre><p style='margin-top:5px'>From clang-format 3.4"
    },
    "DeriveLineEnding": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#derivelineending'>DeriveLineEnding Documentation</a>\n<p style='margin-top:5px'>This option is **deprecated**. See <code>DeriveLF</code> and <code>DeriveCRLF</code> of\n<code>LineEnding</code>.<p style='margin-top:5px'>From clang-format 10",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "DerivePointerAlignment": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#derivepointeralignment'>DerivePointerAlignment Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, analyze the formatted file for the most common\nalignment of <code>&</code> and <code>*</code>.\nPointer and reference alignment styles are going to be updated according\nto the preferences found in the file.\n<code>PointerAlignment</code> is then used only as fallback.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "DisableFormat": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#disableformat'>DisableFormat Documentation</a>\n<p style='margin-top:5px'>Disables formatting completely.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "EmptyLineAfterAccessModifier": {
      "type": "string",
      "enum": [
        "Never",
        "Leave",
        "Always"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Remove all empty lines after access modifiers."
        },
        "Leave": {
          "description": "Keep existing empty lines after access modifiers."
        },
        "Always": {
          "description": "Always add empty line after access modifiers if there are none."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#emptylineafteraccessmodifier'>EmptyLineAfterAccessModifier Documentation</a>\n<p style='margin-top:5px'>Defines when to put an empty line after access modifiers.\n<code>EmptyLineBeforeAccessModifier</code> configuration handles the number of\nempty lines between two access modifiers.<p style='margin-top:5px'>From clang-format 13<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "EmptyLineBeforeAccessModifier": {
      "type": "string",
      "enum": [
        "Never",
        "Leave",
        "LogicalBlock",
        "Always"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Remove all empty lines before access modifiers."
        },
        "Leave": {
          "description": "Keep existing empty lines before access modifiers."
        },
        "LogicalBlock": {
          "description": "Add empty line only when access modifier starts a new logical block."
        },
        "Always": {
          "description": "Always add empty line before access modifiers unless access modifier"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#emptylinebeforeaccessmodifier'>EmptyLineBeforeAccessModifier Documentation</a>\n<p style='margin-top:5px'>Defines in which cases to put empty line before access modifiers.<p style='margin-top:5px'>From clang-format 12<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "ExperimentalAutoDetectBinPacking": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#experimentalautodetectbinpacking'>ExperimentalAutoDetectBinPacking Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, clang-format detects whether function calls and\ndefinitions are formatted with one parameter per line.\n<p style='margin-top:5px'>Each call can be bin-packed, one-per-line or inconclusive. If it is\ninconclusive, e.g. completely on one line, but a decision needs to be\nmade, clang-format analyzes whether there are other bin-packed cases in\nthe input file and act accordingly.\n<p style='margin-top:5px'><b>Note</b> This is an experimental flag, that might go away or be renamed. Do\n not use this in config files, etc. Use at your own risk.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "FixNamespaceComments": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#fixnamespacecomments'>FixNamespaceComments Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, clang-format adds missing namespace end comments for\nnamespaces and fixes invalid existing ones. This doesn't affect short\nnamespaces, which are controlled by <code>ShortNamespaceLines</code>.\n\n<pre><code class='c++'>   true:                                  false:\n   namespace longNamespace {      vs.     namespace longNamespace {\n   void foo();                            void foo();\n   void bar();                            void bar();\n   } // namespace a                       }\n   namespace shortNamespace {             namespace shortNamespace {\n   void baz();                            void baz();\n   }                                      }\n</code></pre><p style='margin-top:5px'>From clang-format 5"
    },
    "ForEachMacros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#foreachmacros'>ForEachMacros Documentation</a>\n<p style='margin-top:5px'>A vector of macros that should be interpreted as foreach loops\ninstead of as function calls.\n<p style='margin-top:5px'>These are expected to be macros of the form:\n\n<pre><code class='c++'>  FOREACH(&lt;variable-declaration&gt;, ...)\n    &lt;loop-body&gt;\n</code></pre>\n<p style='margin-top:5px'>In the .clang-format configuration file, this can be configured like:\n\n<pre><code class='yaml'>  ForEachMacros: [RANGES_FOR, FOREACH]\n</code></pre>\n<p style='margin-top:5px'>For example: BOOST_FOREACH.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "IfMacros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#ifmacros'>IfMacros Documentation</a>\n<p style='margin-top:5px'>A vector of macros that should be interpreted as conditionals\ninstead of as function calls.\n<p style='margin-top:5px'>These are expected to be macros of the form:\n\n<pre><code class='c++'>  IF(...)\n    &lt;conditional-body&gt;\n  else IF(...)\n    &lt;conditional-body&gt;\n</code></pre>\n<p style='margin-top:5px'>In the .clang-format configuration file, this can be configured like:\n\n<pre><code class='yaml'>  IfMacros: [IF]\n</code></pre>\n<p style='margin-top:5px'>For example: <a href='https://github.com/capnproto/capnproto/blob/master/kjdoc/tour.md#maybes'>KJ_IF_MAYBE\n</a><p style='margin-top:5px'>From clang-format 13"
    },
    "IncludeBlocks": {
      "type": "string",
      "enum": [
        "Preserve",
        "Merge",
        "Regroup"
      ],
      "x-intellij-enum-metadata": {
        "Preserve": {
          "description": "Sort each '#include' block separately."
        },
        "Merge": {
          "description": "Merge multiple '#include' blocks together and sort as one."
        },
        "Regroup": {
          "description": "Merge multiple '#include' blocks together and sort as one."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includeblocks'>IncludeBlocks Documentation</a>\n<p style='margin-top:5px'>Dependent on the value, multiple <code>#include</code> blocks can be sorted\nas one and divided based on category.<p style='margin-top:5px'>From clang-format 6<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "IncludeCategories": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "RegexIsCaseSensitive": {
            "type": "boolean",
            "x-intellij-html-description": "If the regular expression is case sensitive.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includecategories'>IncludeCategories Documentation</a>\n"
          },
          "Priority": {
            "type": "number",
            "x-intellij-html-description": "The priority to assign to this category.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includecategories'>IncludeCategories Documentation</a>\n"
          },
          "SortPriority": {
            "type": "number",
            "x-intellij-html-description": "The custom priority to sort before grouping.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includecategories'>IncludeCategories Documentation</a>\n"
          },
          "Regex": {
            "type": "string",
            "x-intellij-html-description": "The regular expression that this category matches.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includecategories'>IncludeCategories Documentation</a>\n"
          }
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includecategories'>IncludeCategories Documentation</a>\n<p style='margin-top:5px'>Regular expressions denoting the different <code>#include</code> categories\nused for ordering <code>#includes</code>.\n<p style='margin-top:5px'><a href='https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html'>POSIX extended\n</a>\nregular expressions are supported.\n<p style='margin-top:5px'>These regular expressions are matched against the filename of an include\n(including the <> or \"\") in order. The value belonging to the first\nmatching regular expression is assigned and <code>#includes</code> are sorted first\naccording to increasing category number and then alphabetically within\neach category.\n<p style='margin-top:5px'>If none of the regular expressions match, INT_MAX is assigned as\ncategory. The main header for a source file automatically gets category 0.\nso that it is generally kept at the beginning of the <code>#includes</code>\n(<a href='https://llvm.org/docs/CodingStandards.html#include-style'>https://llvm.org/docs/CodingStandards.html#include-style</a>). However, you\ncan also assign negative priorities if you have certain headers that\nalways need to be first.\n<p style='margin-top:5px'>There is a third and optional field <code>SortPriority</code> which can used while\n<code>IncludeBlocks = IBS_Regroup</code> to define the priority in which\n<code>#includes</code> should be ordered. The value of <code>Priority</code> defines the\norder of <code>#include blocks</code> and also allows the grouping of <code>#includes</code>\nof different priority. <code>SortPriority</code> is set to the value of\n<code>Priority</code> as default if it is not assigned.\n<p style='margin-top:5px'>Each regular expression can be marked as case sensitive with the field\n<code>CaseSensitive</code>, per default it is not.\n<p style='margin-top:5px'>To configure this in the .clang-format file, use:\n\n<pre><code class='yaml'>  IncludeCategories:\n    - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n      Priority:        2\n      SortPriority:    2\n      CaseSensitive:   true\n    - Regex:           '^((&lt;|\")(gtest|gmock|isl|json)/)'\n      Priority:        3\n    - Regex:           '&lt;[[:alnum:].]+&gt;'\n      Priority:        4\n    - Regex:           '.*'\n      Priority:        1\n      SortPriority:    0\n</code></pre><p style='margin-top:5px'>From clang-format 3.8"
    },
    "IncludeIsMainRegex": {
      "type": "string",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includeismainregex'>IncludeIsMainRegex Documentation</a>\n<p style='margin-top:5px'>Specify a regular expression of suffixes that are allowed in the\nfile-to-main-include mapping.\n<p style='margin-top:5px'>When guessing whether a #include is the \"main\" include (to assign\ncategory 0, see above), use this regex of allowed suffixes to the header\nstem. A partial match is done, so that:\n* <code>\"\"</code> means \"arbitrary suffix\"\n* <code>\"$\"</code> means \"no suffix\"\n<p style='margin-top:5px'>For example, if configured to <code>\"(_test)?$\"</code>, then a header a.h would be seen\nas the \"main\" include in both a.cc and a_test.cc.<p style='margin-top:5px'>From clang-format 3.9"
    },
    "IncludeIsMainSourceRegex": {
      "type": "string",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includeismainsourceregex'>IncludeIsMainSourceRegex Documentation</a>\n<p style='margin-top:5px'>Specify a regular expression for files being formatted\nthat are allowed to be considered \"main\" in the\nfile-to-main-include mapping.\n<p style='margin-top:5px'>By default, clang-format considers files as \"main\" only when they end\nwith: <code>.c</code>, <code>.cc</code>, <code>.cpp</code>, <code>.c++</code>, <code>.cxx</code>, <code>.m</code> or <code>.mm</code>\nextensions.\nFor these files a guessing of \"main\" include takes place\n(to assign category 0, see above). This config option allows for\nadditional suffixes and extensions for files to be considered as \"main\".\n<p style='margin-top:5px'>For example, if this option is configured to <code>(Impl\\.hpp)$</code>,\nthen a file <code>ClassImpl.hpp</code> is considered \"main\" (in addition to\n<code>Class.c</code>, <code>Class.cc</code>, <code>Class.cpp</code> and so on) and \"main\ninclude file\" logic will be executed (with *IncludeIsMainRegex* setting\nalso being respected in later phase). Without this option set,\n<code>ClassImpl.hpp</code> would not have the main include file put on top\nbefore any other include.<p style='margin-top:5px'>From clang-format 10"
    },
    "IndentAccessModifiers": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentaccessmodifiers'>IndentAccessModifiers Documentation</a>\n<p style='margin-top:5px'>Specify whether access modifiers should have their own indentation level.\n<p style='margin-top:5px'>When <code>false</code>, access modifiers are indented (or outdented) relative to\nthe record members, respecting the <code>AccessModifierOffset</code>. Record\nmembers are indented one level below the record.\nWhen <code>true</code>, access modifiers get their own indentation level. As a\nconsequence, record members are always indented 2 levels below the record,\nregardless of the access modifier presence. Value of the\n<code>AccessModifierOffset</code> is ignored.\n\n<pre><code class='c++'>   false:                                 true:\n   class C {                      vs.     class C {\n     class D {                                class D {\n       void bar();                                void bar();\n     protected:                                 protected:\n       D();                                       D();\n     };                                       };\n   public:                                  public:\n     C();                                     C();\n   };                                     };\n   void foo() {                           void foo() {\n     return 1;                              return 1;\n   }                                      }\n</code></pre><p style='margin-top:5px'>From clang-format 13"
    },
    "IndentCaseBlocks": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentcaseblocks'>IndentCaseBlocks Documentation</a>\n<p style='margin-top:5px'>Indent case label blocks one level from the case label.\n<p style='margin-top:5px'>When <code>false</code>, the block following the case label uses the same\nindentation level as for the case label, treating the case label the same\nas an if-statement.\nWhen <code>true</code>, the block gets indented as a scope block.\n\n<pre><code class='c++'>   false:                                 true:\n   switch (fool) {                vs.     switch (fool) {\n   case 1: {                              case 1:\n     bar();                                 {\n   } break;                                   bar();\n   default: {                               }\n     plop();                                break;\n   }                                      default:\n   }                                        {\n                                              plop();\n                                            }\n                                          }\n</code></pre><p style='margin-top:5px'>From clang-format 11"
    },
    "IndentCaseLabels": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentcaselabels'>IndentCaseLabels Documentation</a>\n<p style='margin-top:5px'>Indent case labels one level from the switch statement.\n<p style='margin-top:5px'>When <code>false</code>, use the same indentation level as for the switch\nstatement. Switch statement body is always indented one level more than\ncase labels (except the first block following the case label, which\nitself indents the code - unless IndentCaseBlocks is enabled).\n\n<pre><code class='c++'>   false:                                 true:\n   switch (fool) {                vs.     switch (fool) {\n   case 1:                                  case 1:\n     bar();                                   bar();\n     break;                                   break;\n   default:                                 default:\n     plop();                                  plop();\n   }                                      }\n</code></pre><p style='margin-top:5px'>From clang-format 3.3"
    },
    "IndentExportBlock": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentexportblock'>IndentExportBlock Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, clang-format will indent the body of an <code>export { ... }</code>\nblock. This doesn't affect the formatting of anything else related to\nexported declarations.\n\n<pre><code class='c++'>   true:                     false:\n   export {          vs.     export {\n     void foo();             void foo();\n     void bar();             void bar();\n   }                         }\n</code></pre><p style='margin-top:5px'>From clang-format 20"
    },
    "IndentExternBlock": {
      "type": "string",
      "enum": [
        "AfterExternBlock",
        "NoIndent",
        "Indent"
      ],
      "x-intellij-enum-metadata": {
        "AfterExternBlock": {
          "description": "Backwards compatible with AfterExternBlock's indenting."
        },
        "NoIndent": {
          "description": "Does not indent extern blocks."
        },
        "Indent": {
          "description": "Indents extern blocks."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentexternblock'>IndentExternBlock Documentation</a>\n<p style='margin-top:5px'>IndentExternBlockStyle is the type of indenting of extern blocks.<p style='margin-top:5px'>From clang-format 11<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "IndentGotoLabels": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentgotolabels'>IndentGotoLabels Documentation</a>\n<p style='margin-top:5px'>Indent goto labels.\n<p style='margin-top:5px'>When <code>false</code>, goto labels are flushed left.\n\n<pre><code class='c++'>   true:                                  false:\n   int f() {                      vs.     int f() {\n     if (foo()) {                           if (foo()) {\n     label1:                              label1:\n       bar();                                 bar();\n     }                                      }\n   label2:                                label2:\n     return 1;                              return 1;\n   }                                      }\n</code></pre><p style='margin-top:5px'>From clang-format 10"
    },
    "IndentPPDirectives": {
      "type": "string",
      "enum": [
        "None",
        "AfterHash",
        "BeforeHash"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "Does not indent any directives."
        },
        "AfterHash": {
          "description": "Indents directives after the hash."
        },
        "BeforeHash": {
          "description": "Indents directives before the hash."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentppdirectives'>IndentPPDirectives Documentation</a>\n<p style='margin-top:5px'>The preprocessor directive indenting style to use.<p style='margin-top:5px'>From clang-format 6<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "IndentRequiresClause": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentrequiresclause'>IndentRequiresClause Documentation</a>\n<p style='margin-top:5px'>Indent the requires clause in a template. This only applies when\n<code>RequiresClausePosition</code> is <code>OwnLine</code>, <code>OwnLineWithBrace</code>,\nor <code>WithFollowing</code>.\n<p style='margin-top:5px'>In clang-format 12, 13 and 14 it was named <code>IndentRequires</code>.\n\n<pre><code class='c++'>   true:\n   template &lt;typename It&gt;\n     requires Iterator&lt;It&gt;\n   void sort(It begin, It end) {\n     //....\n   }\n\n   false:\n   template &lt;typename It&gt;\n   requires Iterator&lt;It&gt;\n   void sort(It begin, It end) {\n     //....\n   }\n</code></pre><p style='margin-top:5px'>From clang-format 15"
    },
    "IndentWidth": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentwidth'>IndentWidth Documentation</a>\n<p style='margin-top:5px'>The number of columns to use for indentation.\n\n<pre><code class='c++'>   IndentWidth: 3\n\n   void f() {\n      someFunction();\n      if (true, false) {\n         f();\n      }\n   }\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "IndentWrappedFunctionNames": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#indentwrappedfunctionnames'>IndentWrappedFunctionNames Documentation</a>\n<p style='margin-top:5px'>Indent if a function definition or declaration is wrapped after the\ntype.\n\n<pre><code class='c++'>   true:\n   LoooooooooooooooooooooooooooooooooooooooongReturnType\n       LoooooooooooooooooooooooooooooooongFunctionDeclaration();\n\n   false:\n   LoooooooooooooooooooooooooooooooooooooooongReturnType\n   LoooooooooooooooooooooooooooooooongFunctionDeclaration();\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "InsertBraces": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#insertbraces'>InsertBraces Documentation</a>\n<p style='margin-top:5px'>Insert braces after control statements (<code>if</code>, <code>else</code>, <code>for</code>, <code>do</code>,\nand <code>while</code>) in C++ unless the control statements are inside macro\ndefinitions or the braces would enclose preprocessor directives.\n<b>Warning:</b> Setting this option to <code>true</code> could lead to incorrect code formatting\n due to clang-format's lack of complete semantic information. As such,\n extra care should be taken to review code changes made by this option.\n\n<pre><code class='c++'>  false:                                    true:\n\n  if (isa&lt;FunctionDecl&gt;(D))        vs.      if (isa&lt;FunctionDecl&gt;(D)) {\n    handleFunctionDecl(D);                    handleFunctionDecl(D);\n  else if (isa&lt;VarDecl&gt;(D))                 } else if (isa&lt;VarDecl&gt;(D)) {\n    handleVarDecl(D);                         handleVarDecl(D);\n  else                                      } else {\n    return;                                   return;\n                                            }\n\n  while (i--)                      vs.      while (i--) {\n    for (auto *A : D.attrs())                 for (auto *A : D.attrs()) {\n      handleAttr(A);                            handleAttr(A);\n                                              }\n                                            }\n\n  do                               vs.      do {\n    --i;                                      --i;\n  while (i);                                } while (i);\n</code></pre><p style='margin-top:5px'>From clang-format 15"
    },
    "InsertNewlineAtEOF": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#insertnewlineateof'>InsertNewlineAtEOF Documentation</a>\n<p style='margin-top:5px'>Insert a newline at end of file if missing.<p style='margin-top:5px'>From clang-format 16"
    },
    "InsertTrailingCommas": {
      "type": "string",
      "enum": [
        "None",
        "Wrapped"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "Do not insert trailing commas."
        },
        "Wrapped": {
          "description": "Insert trailing commas in container literals that were wrapped over"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#inserttrailingcommas'>InsertTrailingCommas Documentation</a>\n<p style='margin-top:5px'>If set to <code>TCS_Wrapped</code> will insert trailing commas in container\nliterals (arrays and objects) that wrap across multiple lines.\nIt is currently only available for JavaScript\nand disabled by default <code>TCS_None</code>.\n<code>InsertTrailingCommas</code> cannot be used together with <code>BinPackArguments</code>\nas inserting the comma disables bin-packing.\n\n<pre><code class='c++'>  TSC_Wrapped:\n  const someArray = [\n  aaaaaaaaaaaaaaaaaaaaaaaaaa,\n  aaaaaaaaaaaaaaaaaaaaaaaaaa,\n  aaaaaaaaaaaaaaaaaaaaaaaaaa,\n  //                        ^ inserted\n  ]\n</code></pre><p style='margin-top:5px'>From clang-format 11<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "IntegerLiteralSeparator": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Binary": {
          "type": "number",
          "x-intellij-html-description": "Format separators in binary literals.\n\n<pre><code class='text'>  /* -1: */ b = 0b100111101101;\n  /*  0: */ b = 0b10011'11'0110'1;\n  /*  3: */ b = 0b100'111'101'101;\n  /*  4: */ b = 0b1001'1110'1101;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#integerliteralseparator'>IntegerLiteralSeparator Documentation</a>\n"
        },
        "BinaryMinDigits": {
          "type": "number",
          "x-intellij-html-description": "Format separators in binary literals with a minimum number of digits.\n\n<pre><code class='text'>  // Binary: 3\n  // BinaryMinDigits: 7\n  b1 = 0b101101;\n  b2 = 0b1'101'101;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#integerliteralseparator'>IntegerLiteralSeparator Documentation</a>\n"
        },
        "Decimal": {
          "type": "number",
          "x-intellij-html-description": "Format separators in decimal literals.\n\n<pre><code class='text'>  /* -1: */ d = 18446744073709550592ull;\n  /*  0: */ d = 184467'440737'0'95505'92ull;\n  /*  3: */ d = 18'446'744'073'709'550'592ull;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#integerliteralseparator'>IntegerLiteralSeparator Documentation</a>\n"
        },
        "DecimalMinDigits": {
          "type": "number",
          "x-intellij-html-description": "Format separators in decimal literals with a minimum number of digits.\n\n<pre><code class='text'>  // Decimal: 3\n  // DecimalMinDigits: 5\n  d1 = 2023;\n  d2 = 10'000;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#integerliteralseparator'>IntegerLiteralSeparator Documentation</a>\n"
        },
        "Hex": {
          "type": "number",
          "x-intellij-html-description": "Format separators in hexadecimal literals.\n\n<pre><code class='text'>  /* -1: */ h = 0xDEADBEEFDEADBEEFuz;\n  /*  0: */ h = 0xDEAD'BEEF'DE'AD'BEE'Fuz;\n  /*  2: */ h = 0xDE'AD'BE'EF'DE'AD'BE'EFuz;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#integerliteralseparator'>IntegerLiteralSeparator Documentation</a>\n"
        },
        "HexMinDigits": {
          "type": "number",
          "x-intellij-html-description": "Format separators in hexadecimal literals with a minimum number of\ndigits.\n\n<pre><code class='text'>  // Hex: 2\n  // HexMinDigits: 6\n  h1 = 0xABCDE;\n  h2 = 0xAB'CD'EF;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#integerliteralseparator'>IntegerLiteralSeparator Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#integerliteralseparator'>IntegerLiteralSeparator Documentation</a>\n<p style='margin-top:5px'>Format integer literal separators (<code>'</code> for C++ and <code>_</code> for C#, Java,\nand JavaScript).<p style='margin-top:5px'>Separator format of integer literals of different bases.\n<p style='margin-top:5px'>If negative, remove separators. If  <code>0</code>, leave the literal as is. If\npositive, insert separators between digits starting from the rightmost\ndigit.\n<p style='margin-top:5px'>For example, the config below will leave separators in binary literals\nalone, insert separators in decimal literals to separate the digits into\ngroups of 3, and remove separators in hexadecimal literals.\n\n<pre><code class='c++'>  IntegerLiteralSeparator:\n    Binary: 0\n    Decimal: 3\n    Hex: -1\n</code></pre>\n<p style='margin-top:5px'>You can also specify a minimum number of digits (<code>BinaryMinDigits</code>,\n<code>DecimalMinDigits</code>, and <code>HexMinDigits</code>) the integer literal must\nhave in order for the separators to be inserted.<p style='margin-top:5px'>From clang-format 16"
    },
    "JavaImportGroups": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#javaimportgroups'>JavaImportGroups Documentation</a>\n<p style='margin-top:5px'>A vector of prefixes ordered by the desired groups for Java imports.\n<p style='margin-top:5px'>One group's prefix can be a subset of another - the longest prefix is\nalways matched. Within a group, the imports are ordered lexicographically.\nStatic imports are grouped separately and follow the same group rules.\nBy default, static imports are placed before non-static imports,\nbut this behavior is changed by another option,\n<code>SortJavaStaticImport</code>.\n<p style='margin-top:5px'>In the .clang-format configuration file, this can be configured like\nin the following yaml example. This will result in imports being\nformatted as in the Java example below.\n\n<pre><code class='yaml'>  JavaImportGroups: [com.example, com, org]\n</code></pre>\n<p style='margin-top:5px'>\n<pre><code class='java'>   import static com.example.function1;\n\n   import static com.test.function2;\n\n   import static org.example.function3;\n\n   import com.example.ClassA;\n   import com.example.Test;\n   import com.example.a.ClassB;\n\n   import com.test.ClassC;\n\n   import org.example.ClassD;\n</code></pre><p style='margin-top:5px'>From clang-format 8"
    },
    "JavaScriptQuotes": {
      "type": "string",
      "enum": [
        "Leave",
        "Single",
        "Double"
      ],
      "x-intellij-enum-metadata": {
        "Leave": {
          "description": "Leave string quotes as they are."
        },
        "Single": {
          "description": "Always use single quotes."
        },
        "Double": {
          "description": "Always use double quotes."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#javascriptquotes'>JavaScriptQuotes Documentation</a>\n<p style='margin-top:5px'>The JavaScriptQuoteStyle to use for JavaScript strings.<p style='margin-top:5px'>From clang-format 3.9<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "JavaScriptWrapImports": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#javascriptwrapimports'>JavaScriptWrapImports Documentation</a>\n<p style='margin-top:5px'>Whether to wrap JavaScript import/export statements.\n\n<pre><code class='js'>   true:\n   import {\n       VeryLongImportsAreAnnoying,\n       VeryLongImportsAreAnnoying,\n       VeryLongImportsAreAnnoying,\n   } from \"some/module.js\"\n\n   false:\n   import {VeryLongImportsAreAnnoying, VeryLongImportsAreAnnoying, VeryLongImportsAreAnnoying,} from \"some/module.js\"\n</code></pre><p style='margin-top:5px'>From clang-format 3.9"
    },
    "KeepEmptyLines": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AtEndOfFile": {
          "type": "boolean",
          "x-intellij-html-description": "Keep empty lines at end of file.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#keepemptylines'>KeepEmptyLines Documentation</a>\n"
        },
        "AtStartOfBlock": {
          "type": "boolean",
          "x-intellij-html-description": "Keep empty lines at start of a block.\n\n<pre><code class='c++'>   true:                                  false:\n   if (foo) {                     vs.     if (foo) {\n                                            bar();\n     bar();                               }\n   }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#keepemptylines'>KeepEmptyLines Documentation</a>\n"
        },
        "AtStartOfFile": {
          "type": "boolean",
          "x-intellij-html-description": "Keep empty lines at start of file.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#keepemptylines'>KeepEmptyLines Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#keepemptylines'>KeepEmptyLines Documentation</a>\n<p style='margin-top:5px'>Which empty lines are kept.  See <code>MaxEmptyLinesToKeep</code> for how many\nconsecutive empty lines are kept.<p style='margin-top:5px'>Options regarding which empty lines are kept.\n<p style='margin-top:5px'>For example, the config below will remove empty lines at start of the\nfile, end of the file, and start of blocks.\n<p style='margin-top:5px'>\n<pre><code class='c++'>  KeepEmptyLines:\n    AtEndOfFile: false\n    AtStartOfBlock: false\n    AtStartOfFile: false\n</code></pre><p style='margin-top:5px'>From clang-format 19"
    },
    "KeepEmptyLinesAtEOF": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#keepemptylinesateof'>KeepEmptyLinesAtEOF Documentation</a>\n<p style='margin-top:5px'>This option is **deprecated**. See <code>AtEndOfFile</code> of <code>KeepEmptyLines</code>.<p style='margin-top:5px'>From clang-format 17",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "KeepEmptyLinesAtTheStartOfBlocks": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#keepemptylinesatthestartofblocks'>KeepEmptyLinesAtTheStartOfBlocks Documentation</a>\n<p style='margin-top:5px'>This option is **deprecated**. See <code>AtStartOfBlock</code> of\n<code>KeepEmptyLines</code>.<p style='margin-top:5px'>From clang-format 3.7",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "KeepFormFeed": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#keepformfeed'>KeepFormFeed Documentation</a>\n<p style='margin-top:5px'>Keep the form feed character if it's immediately preceded and followed by\na newline. Multiple form feeds and newlines within a whitespace range are\nreplaced with a single newline and form feed followed by the remaining\nnewlines.<p style='margin-top:5px'>From clang-format 20"
    },
    "LambdaBodyIndentation": {
      "type": "string",
      "enum": [
        "Signature",
        "OuterScope"
      ],
      "x-intellij-enum-metadata": {
        "Signature": {
          "description": "Align lambda body relative to the lambda signature. This is the default."
        },
        "OuterScope": {
          "description": "For statements within block scope, align lambda body relative to the"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#lambdabodyindentation'>LambdaBodyIndentation Documentation</a>\n<p style='margin-top:5px'>The indentation style of lambda bodies. <code>Signature</code> (the default)\ncauses the lambda body to be indented one additional level relative to\nthe indentation level of the signature. <code>OuterScope</code> forces the lambda\nbody to be indented one additional level relative to the parent scope\ncontaining the lambda signature.<p style='margin-top:5px'>From clang-format 13<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "Language": {
      "type": "string",
      "enum": [
        "None",
        "C",
        "Cpp",
        "CSharp",
        "Java",
        "JavaScript",
        "Json",
        "ObjC",
        "Proto",
        "TableGen",
        "TextProto",
        "Verilog"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "Do not use."
        },
        "C": {
          "description": "Should be used for C."
        },
        "Cpp": {
          "description": "Should be used for C++."
        },
        "CSharp": {
          "description": "Should be used for C#."
        },
        "Java": {
          "description": "Should be used for Java."
        },
        "JavaScript": {
          "description": "Should be used for JavaScript."
        },
        "Json": {
          "description": "Should be used for JSON."
        },
        "ObjC": {
          "description": "Should be used for Objective-C, Objective-C++."
        },
        "Proto": {
          "description": "Should be used for Protocol Buffers"
        },
        "TableGen": {
          "description": "Should be used for TableGen code."
        },
        "TextProto": {
          "description": "Should be used for Protocol Buffer messages in text format"
        },
        "Verilog": {
          "description": "Should be used for Verilog and SystemVerilog."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#language'>Language Documentation</a>\n<p style='margin-top:5px'>The language that this format style targets.\n<b>Note</b> You can specify the language (<code>C</code>, <code>Cpp</code>, or <code>ObjC</code>) for <code>.h</code>\n files by adding a <code>// clang-format Language:</code> line before the first\n non-comment (and non-empty) line, e.g. <code>// clang-format Language: Cpp</code>.<p style='margin-top:5px'>From clang-format 3.5<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "LineEnding": {
      "type": "string",
      "enum": [
        "LF",
        "CRLF",
        "DeriveLF",
        "DeriveCRLF"
      ],
      "x-intellij-enum-metadata": {
        "LF": {
          "description": "Use '\\n'."
        },
        "CRLF": {
          "description": "Use '\\r\\n'."
        },
        "DeriveLF": {
          "description": "Use '\\n' unless the input has more lines ending in '\\r\\n'."
        },
        "DeriveCRLF": {
          "description": "Use '\\r\\n' unless the input has more lines ending in '\\n'."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#lineending'>LineEnding Documentation</a>\n<p style='margin-top:5px'>Line ending style (<code>\\n</code> or <code>\\r\\n</code>) to use.<p style='margin-top:5px'>From clang-format 16<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "MacroBlockBegin": {
      "type": "string",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#macroblockbegin'>MacroBlockBegin Documentation</a>\n<p style='margin-top:5px'>A regular expression matching macros that start a block.\n\n<pre><code class='c++'>   # With:\n   MacroBlockBegin: \"^NS_MAP_BEGIN|\\\n   NS_TABLE_HEAD$\"\n   MacroBlockEnd: \"^\\\n   NS_MAP_END|\\\n   NS_TABLE_.*_END$\"\n\n   NS_MAP_BEGIN\n     foo();\n   NS_MAP_END\n\n   NS_TABLE_HEAD\n     bar();\n   NS_TABLE_FOO_END\n\n   # Without:\n   NS_MAP_BEGIN\n   foo();\n   NS_MAP_END\n\n   NS_TABLE_HEAD\n   bar();\n   NS_TABLE_FOO_END\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "MacroBlockEnd": {
      "type": "string",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#macroblockend'>MacroBlockEnd Documentation</a>\n<p style='margin-top:5px'>A regular expression matching macros that end a block.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "Macros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#macros'>Macros Documentation</a>\n<p style='margin-top:5px'>A list of macros of the form <code><definition>=<expansion></code> .\n<p style='margin-top:5px'>Code will be parsed with macros expanded, in order to determine how to\ninterpret and format the macro arguments.\n<p style='margin-top:5px'>For example, the code:\n\n<pre><code class='c++'>  A(a*b);\n</code></pre>\n<p style='margin-top:5px'>will usually be interpreted as a call to a function A, and the\nmultiplication expression will be formatted as <code>a * b</code>.\n<p style='margin-top:5px'>If we specify the macro definition:\n\n<pre><code class='yaml'>  Macros:\n  - A(x)=x\n</code></pre>\n<p style='margin-top:5px'>the code will now be parsed as a declaration of the variable b of type a*,\nand formatted as <code>a* b</code> (depending on pointer-binding rules).\n<p style='margin-top:5px'>Features and restrictions:\n * Both function-like macros and object-like macros are supported.\n * Macro arguments must be used exactly once in the expansion.\n * No recursive expansion; macros referencing other macros will be\n   ignored.\n * Overloading by arity is supported: for example, given the macro\n   definitions A=x, A()=y, A(a)=a\n<p style='margin-top:5px'>\n<pre><code class='c++'>   A; -&gt; x;\n   A(); -&gt; y;\n   A(z); -&gt; z;\n   A(a, b); // will not be expanded.\n</code></pre>\n<p style='margin-top:5px'><p style='margin-top:5px'>From clang-format 17"
    },
    "MainIncludeChar": {
      "type": "string",
      "enum": [
        "Quote",
        "AngleBracket",
        "Any"
      ],
      "x-intellij-enum-metadata": {
        "Quote": {
          "description": "Main include uses quotes: '#include \"foo.hpp\"' (the default)."
        },
        "AngleBracket": {
          "description": "Main include uses angle brackets: '#include '."
        },
        "Any": {
          "description": "Main include uses either quotes or angle brackets."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#mainincludechar'>MainIncludeChar Documentation</a>\n<p style='margin-top:5px'>When guessing whether a #include is the \"main\" include, only the include\ndirectives that use the specified character are considered.<p style='margin-top:5px'>From clang-format 19<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "MaxEmptyLinesToKeep": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#maxemptylinestokeep'>MaxEmptyLinesToKeep Documentation</a>\n<p style='margin-top:5px'>The maximum number of consecutive empty lines to keep.\n\n<pre><code class='c++'>   MaxEmptyLinesToKeep: 1         vs.     MaxEmptyLinesToKeep: 0\n   int f() {                              int f() {\n     int = 1;                                 int i = 1;\n                                              i = foo();\n     i = foo();                               return i;\n                                          }\n     return i;\n   }\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "NamespaceIndentation": {
      "type": "string",
      "enum": [
        "None",
        "Inner",
        "All"
      ],
      "x-intellij-enum-metadata": {
        "None": {
          "description": "Don't indent in namespaces."
        },
        "Inner": {
          "description": "Indent only in inner namespaces (nested in other namespaces)."
        },
        "All": {
          "description": "Indent in all namespaces."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#namespaceindentation'>NamespaceIndentation Documentation</a>\n<p style='margin-top:5px'>The indentation used for namespaces.<p style='margin-top:5px'>From clang-format 3.7<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "NamespaceMacros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#namespacemacros'>NamespaceMacros Documentation</a>\n<p style='margin-top:5px'>A vector of macros which are used to open namespace blocks.\n<p style='margin-top:5px'>These are expected to be macros of the form:\n\n<pre><code class='c++'>  NAMESPACE(&lt;namespace-name&gt;, ...) {\n    &lt;namespace-content&gt;\n  }\n</code></pre>\n<p style='margin-top:5px'>For example: TESTSUITE<p style='margin-top:5px'>From clang-format 9"
    },
    "ObjCBinPackProtocolList": {
      "type": "string",
      "enum": [
        "Auto",
        "Always",
        "Never"
      ],
      "x-intellij-enum-metadata": {
        "Auto": {
          "description": "Automatically determine parameter bin-packing behavior."
        },
        "Always": {
          "description": "Always bin-pack parameters."
        },
        "Never": {
          "description": "Never bin-pack parameters."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#objcbinpackprotocollist'>ObjCBinPackProtocolList Documentation</a>\n<p style='margin-top:5px'>Controls bin-packing Objective-C protocol conformance list\nitems into as few lines as possible when they go over <code>ColumnLimit</code>.\n<p style='margin-top:5px'>If <code>Auto</code> (the default), delegates to the value in\n<code>BinPackParameters</code>. If that is <code>BinPack</code>, bin-packs Objective-C\nprotocol conformance list items into as few lines as possible\nwhenever they go over <code>ColumnLimit</code>.\n<p style='margin-top:5px'>If <code>Always</code>, always bin-packs Objective-C protocol conformance\nlist items into as few lines as possible whenever they go over\n<code>ColumnLimit</code>.\n<p style='margin-top:5px'>If <code>Never</code>, lays out Objective-C protocol conformance list items\nonto individual lines whenever they go over <code>ColumnLimit</code>.\n<p style='margin-top:5px'>\n<pre><code class='objc'>   Always (or Auto, if BinPackParameters==BinPack):\n   @interface ccccccccccccc () &lt;\n       ccccccccccccc, ccccccccccccc,\n       ccccccccccccc, ccccccccccccc&gt; {\n   }\n\n   Never (or Auto, if BinPackParameters!=BinPack):\n   @interface ddddddddddddd () &lt;\n       ddddddddddddd,\n       ddddddddddddd,\n       ddddddddddddd,\n       ddddddddddddd&gt; {\n   }\n</code></pre><p style='margin-top:5px'>From clang-format 7<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "ObjCBlockIndentWidth": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#objcblockindentwidth'>ObjCBlockIndentWidth Documentation</a>\n<p style='margin-top:5px'>The number of characters to use for indentation of ObjC blocks.\n\n<pre><code class='objc'>   ObjCBlockIndentWidth: 4\n\n   [operation setCompletionBlock:^{\n       [self onOperationDone];\n   }];\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "ObjCBreakBeforeNestedBlockParam": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#objcbreakbeforenestedblockparam'>ObjCBreakBeforeNestedBlockParam Documentation</a>\n<p style='margin-top:5px'>Break parameters list into lines when there is nested block\nparameters in a function call.\n\n<pre><code class='c++'>  false:\n   - (void)_aMethod\n   {\n       [self.test1 t:self w:self callback:^(typeof(self) self, NSNumber\n       *u, NSNumber *v) {\n           u = c;\n       }]\n   }\n   true:\n   - (void)_aMethod\n   {\n      [self.test1 t:self\n                   w:self\n          callback:^(typeof(self) self, NSNumber *u, NSNumber *v) {\n               u = c;\n           }]\n   }\n</code></pre><p style='margin-top:5px'>From clang-format 11"
    },
    "ObjCPropertyAttributeOrder": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#objcpropertyattributeorder'>ObjCPropertyAttributeOrder Documentation</a>\n<p style='margin-top:5px'>The order in which ObjC property attributes should appear.\n<p style='margin-top:5px'>Attributes in code will be sorted in the order specified. Any attributes\nencountered that are not mentioned in this array will be sorted last, in\nstable order. Comments between attributes will leave the attributes\nuntouched.\n<b>Warning:</b> Using this option could lead to incorrect code formatting due to\n clang-format's lack of complete semantic information. As such, extra\n care should be taken to review code changes made by this option.\n\n<pre><code class='yaml'>  ObjCPropertyAttributeOrder: [\n      class, direct,\n      atomic, nonatomic,\n      assign, retain, strong, copy, weak, unsafe_unretained,\n      readonly, readwrite, getter, setter,\n      nullable, nonnull, null_resettable, null_unspecified\n  ]\n</code></pre><p style='margin-top:5px'>From clang-format 18"
    },
    "ObjCSpaceAfterProperty": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#objcspaceafterproperty'>ObjCSpaceAfterProperty Documentation</a>\n<p style='margin-top:5px'>Add a space after <code>@property</code> in Objective-C, i.e. use\n<code>@property (readonly)</code> instead of <code>@property(readonly)</code>.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "ObjCSpaceBeforeProtocolList": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#objcspacebeforeprotocollist'>ObjCSpaceBeforeProtocolList Documentation</a>\n<p style='margin-top:5px'>Add a space in front of an Objective-C protocol list, i.e. use\n<code>Foo <Protocol></code> instead of <code>Foo<Protocol></code>.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "PPIndentWidth": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#ppindentwidth'>PPIndentWidth Documentation</a>\n<p style='margin-top:5px'>The number of columns to use for indentation of preprocessor statements.\nWhen set to -1 (default) <code>IndentWidth</code> is used also for preprocessor\nstatements.\n\n<pre><code class='c++'>   PPIndentWidth: 1\n\n   #ifdef __linux__\n   # define FOO\n   #else\n   # define BAR\n   #endif\n</code></pre><p style='margin-top:5px'>From clang-format 13"
    },
    "PackConstructorInitializers": {
      "type": "string",
      "enum": [
        "Never",
        "BinPack",
        "CurrentLine",
        "NextLine",
        "NextLineOnly"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Always put each constructor initializer on its own line."
        },
        "BinPack": {
          "description": "Bin-pack constructor initializers."
        },
        "CurrentLine": {
          "description": "Put all constructor initializers on the current line if they fit."
        },
        "NextLine": {
          "description": "Same as 'PCIS_CurrentLine' except that if all constructor initializers"
        },
        "NextLineOnly": {
          "description": "Put all constructor initializers on the next line if they fit."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#packconstructorinitializers'>PackConstructorInitializers Documentation</a>\n<p style='margin-top:5px'>The pack constructor initializers style to use.<p style='margin-top:5px'>From clang-format 14<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "PenaltyBreakAssignment": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakassignment'>PenaltyBreakAssignment Documentation</a>\n<p style='margin-top:5px'>The penalty for breaking around an assignment operator.<p style='margin-top:5px'>From clang-format 5"
    },
    "PenaltyBreakBeforeFirstCallParameter": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakbeforefirstcallparameter'>PenaltyBreakBeforeFirstCallParameter Documentation</a>\n<p style='margin-top:5px'>The penalty for breaking a function call after <code>call(</code>.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "PenaltyBreakBeforeMemberAccess": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakbeforememberaccess'>PenaltyBreakBeforeMemberAccess Documentation</a>\n<p style='margin-top:5px'>The penalty for breaking before a member access operator (<code>.</code>, <code>-></code>).<p style='margin-top:5px'>From clang-format 20"
    },
    "PenaltyBreakComment": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakcomment'>PenaltyBreakComment Documentation</a>\n<p style='margin-top:5px'>The penalty for each line break introduced inside a comment.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "PenaltyBreakFirstLessLess": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakfirstlessless'>PenaltyBreakFirstLessLess Documentation</a>\n<p style='margin-top:5px'>The penalty for breaking before the first <code><<</code>.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "PenaltyBreakOpenParenthesis": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakopenparenthesis'>PenaltyBreakOpenParenthesis Documentation</a>\n<p style='margin-top:5px'>The penalty for breaking after <code>(</code>.<p style='margin-top:5px'>From clang-format 14"
    },
    "PenaltyBreakScopeResolution": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakscoperesolution'>PenaltyBreakScopeResolution Documentation</a>\n<p style='margin-top:5px'>The penalty for breaking after <code>::</code>.<p style='margin-top:5px'>From clang-format 18"
    },
    "PenaltyBreakString": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakstring'>PenaltyBreakString Documentation</a>\n<p style='margin-top:5px'>The penalty for each line break introduced inside a string literal.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "PenaltyBreakTemplateDeclaration": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreaktemplatedeclaration'>PenaltyBreakTemplateDeclaration Documentation</a>\n<p style='margin-top:5px'>The penalty for breaking after template declaration.<p style='margin-top:5px'>From clang-format 7"
    },
    "PenaltyExcessCharacter": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltyexcesscharacter'>PenaltyExcessCharacter Documentation</a>\n<p style='margin-top:5px'>The penalty for each character outside of the column limit.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "PenaltyIndentedWhitespace": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltyindentedwhitespace'>PenaltyIndentedWhitespace Documentation</a>\n<p style='margin-top:5px'>Penalty for each character of whitespace indentation\n(counted relative to leading non-whitespace column).<p style='margin-top:5px'>From clang-format 12"
    },
    "PenaltyReturnTypeOnItsOwnLine": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltyreturntypeonitsownline'>PenaltyReturnTypeOnItsOwnLine Documentation</a>\n<p style='margin-top:5px'>Penalty for putting the return type of a function onto its own line.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "PointerAlignment": {
      "type": "string",
      "enum": [
        "Left",
        "Right",
        "Middle"
      ],
      "x-intellij-enum-metadata": {
        "Left": {
          "description": "Align pointer to the left."
        },
        "Right": {
          "description": "Align pointer to the right."
        },
        "Middle": {
          "description": "Align pointer in the middle."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#pointeralignment'>PointerAlignment Documentation</a>\n<p style='margin-top:5px'>Pointer and reference alignment style.<p style='margin-top:5px'>From clang-format 3.7<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "QualifierAlignment": {
      "type": "string",
      "enum": [
        "Leave",
        "Left",
        "Right",
        "Custom"
      ],
      "x-intellij-enum-metadata": {
        "Leave": {
          "description": "Don't change specifiers/qualifiers to either Left or Right alignment"
        },
        "Left": {
          "description": "Change specifiers/qualifiers to be left-aligned."
        },
        "Right": {
          "description": "Change specifiers/qualifiers to be right-aligned."
        },
        "Custom": {
          "description": "Change specifiers/qualifiers to be aligned based on 'QualifierOrder'."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#qualifieralignment'>QualifierAlignment Documentation</a>\n<p style='margin-top:5px'>Different ways to arrange specifiers and qualifiers (e.g. const/volatile).\n<b>Warning:</b> Setting <code>QualifierAlignment</code>  to something other than <code>Leave</code>, COULD\n lead to incorrect code formatting due to incorrect decisions made due to\n clang-formats lack of complete semantic information.\n As such extra care should be taken to review code changes made by the use\n of this option.<p style='margin-top:5px'>From clang-format 14<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "QualifierOrder": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#qualifierorder'>QualifierOrder Documentation</a>\n<p style='margin-top:5px'>The order in which the qualifiers appear.\nThe order is an array that can contain any of the following:\n<p style='margin-top:5px'>  * <code>const</code>\n  * <code>inline</code>\n  * <code>static</code>\n  * <code>friend</code>\n  * <code>constexpr</code>\n  * <code>volatile</code>\n  * <code>restrict</code>\n  * <code>type</code>\n<p style='margin-top:5px'><b>Note</b> It must contain <code>type</code>.\n<p style='margin-top:5px'>Items to the left of <code>type</code> will be placed to the left of the type and\naligned in the order supplied. Items to the right of <code>type</code> will be\nplaced to the right of the type and aligned in the order supplied.\n<p style='margin-top:5px'>\n<pre><code class='yaml'>  QualifierOrder: [inline, static, type, const, volatile]\n</code></pre><p style='margin-top:5px'>From clang-format 14"
    },
    "RawStringFormats": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Language": {
            "x-intellij-html-description": "The language of this raw string.\n<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#rawstringformats'>RawStringFormats Documentation</a>\n"
          },
          "BasedOnStyle": {
            "type": "string",
            "x-intellij-html-description": "The style name on which this raw string format is based on.\nIf not specified, the raw string format is based on the style that this\nformat is based on.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#rawstringformats'>RawStringFormats Documentation</a>\n"
          },
          "CanonicalDelimiter": {
            "type": "string",
            "x-intellij-html-description": "The canonical delimiter for this language.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#rawstringformats'>RawStringFormats Documentation</a>\n"
          },
          "Delimiters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-intellij-html-description": "A list of raw string delimiters that match this language.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#rawstringformats'>RawStringFormats Documentation</a>\n"
          },
          "EnclosingFunctions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-intellij-html-description": "A list of enclosing function names that match this language.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#rawstringformats'>RawStringFormats Documentation</a>\n"
          }
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#rawstringformats'>RawStringFormats Documentation</a>\n<p style='margin-top:5px'>Defines hints for detecting supported languages code blocks in raw\nstrings.\n<p style='margin-top:5px'>A raw string with a matching delimiter or a matching enclosing function\nname will be reformatted assuming the specified language based on the\nstyle for that language defined in the .clang-format file. If no style has\nbeen defined in the .clang-format file for the specific language, a\npredefined style given by <code>BasedOnStyle</code> is used. If <code>BasedOnStyle</code> is\nnot found, the formatting is based on <code>LLVM</code> style. A matching delimiter\ntakes precedence over a matching enclosing function name for determining\nthe language of the raw string contents.\n<p style='margin-top:5px'>If a canonical delimiter is specified, occurrences of other delimiters for\nthe same language will be updated to the canonical if possible.\n<p style='margin-top:5px'>There should be at most one specification per language and each delimiter\nand enclosing function should not occur in multiple specifications.\n<p style='margin-top:5px'>To configure this in the .clang-format file, use:\n\n<pre><code class='yaml'>  RawStringFormats:\n    - Language: TextProto\n        Delimiters:\n          - pb\n          - proto\n        EnclosingFunctions:\n          - PARSE_TEXT_PROTO\n        BasedOnStyle: google\n    - Language: Cpp\n        Delimiters:\n          - cc\n          - cpp\n        BasedOnStyle: LLVM\n        CanonicalDelimiter: cc\n</code></pre><p style='margin-top:5px'>From clang-format 6"
    },
    "ReferenceAlignment": {
      "type": "string",
      "enum": [
        "Pointer",
        "Left",
        "Right",
        "Middle"
      ],
      "x-intellij-enum-metadata": {
        "Pointer": {
          "description": "Align reference like 'PointerAlignment'."
        },
        "Left": {
          "description": "Align reference to the left."
        },
        "Right": {
          "description": "Align reference to the right."
        },
        "Middle": {
          "description": "Align reference in the middle."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#referencealignment'>ReferenceAlignment Documentation</a>\n<p style='margin-top:5px'>Reference alignment style (overrides <code>PointerAlignment</code> for\nreferences).<p style='margin-top:5px'>From clang-format 13<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "ReflowComments": {
      "type": "string",
      "enum": [
        "Never",
        "IndentOnly",
        "Always"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Leave comments untouched."
        },
        "IndentOnly": {
          "description": "Only apply indentation rules, moving comments left or right, without"
        },
        "Always": {
          "description": "Apply indentation rules and reflow long comments into new lines, trying"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#reflowcomments'>ReflowComments Documentation</a>\n<p style='margin-top:5px'>Comment reformatting style.<p style='margin-top:5px'>From clang-format 3.8<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "RemoveBracesLLVM": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#removebracesllvm'>RemoveBracesLLVM Documentation</a>\n<p style='margin-top:5px'>Remove optional braces of control statements (<code>if</code>, <code>else</code>, <code>for</code>,\nand <code>while</code>) in C++ according to the LLVM coding style.\n<b>Warning:</b> This option will be renamed and expanded to support other styles.\n<b>Warning:</b> Setting this option to <code>true</code> could lead to incorrect code formatting\n due to clang-format's lack of complete semantic information. As such,\n extra care should be taken to review code changes made by this option.\n\n<pre><code class='c++'>  false:                                     true:\n\n  if (isa&lt;FunctionDecl&gt;(D)) {        vs.     if (isa&lt;FunctionDecl&gt;(D))\n    handleFunctionDecl(D);                     handleFunctionDecl(D);\n  } else if (isa&lt;VarDecl&gt;(D)) {              else if (isa&lt;VarDecl&gt;(D))\n    handleVarDecl(D);                          handleVarDecl(D);\n  }\n\n  if (isa&lt;VarDecl&gt;(D)) {             vs.     if (isa&lt;VarDecl&gt;(D)) {\n    for (auto *A : D.attrs()) {                for (auto *A : D.attrs())\n      if (shouldProcessAttr(A)) {                if (shouldProcessAttr(A))\n        handleAttr(A);                             handleAttr(A);\n      }                                      }\n    }\n  }\n\n  if (isa&lt;FunctionDecl&gt;(D)) {        vs.     if (isa&lt;FunctionDecl&gt;(D))\n    for (auto *A : D.attrs()) {                for (auto *A : D.attrs())\n      handleAttr(A);                             handleAttr(A);\n    }\n  }\n\n  if (auto *D = (T)(D)) {            vs.     if (auto *D = (T)(D)) {\n    if (shouldProcess(D)) {                    if (shouldProcess(D))\n      handleVarDecl(D);                          handleVarDecl(D);\n    } else {                                   else\n      markAsIgnored(D);                          markAsIgnored(D);\n    }                                        }\n  }\n\n  if (a) {                           vs.     if (a)\n    b();                                       b();\n  } else {                                   else if (c)\n    if (c) {                                   d();\n      d();                                   else\n    } else {                                   e();\n      e();\n    }\n  }\n</code></pre><p style='margin-top:5px'>From clang-format 14"
    },
    "RemoveEmptyLinesInUnwrappedLines": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#removeemptylinesinunwrappedlines'>RemoveEmptyLinesInUnwrappedLines Documentation</a>\n<p style='margin-top:5px'>Remove empty lines within unwrapped lines.\n\n<pre><code class='c++'>  false:                            true:\n\n  int c                  vs.        int c = a + b;\n\n      = a + b;\n\n  enum : unsigned        vs.        enum : unsigned {\n                                      AA = 0,\n  {                                   BB\n    AA = 0,                         } myEnum;\n    BB\n  } myEnum;\n\n  while (                vs.        while (true) {\n                                    }\n      true) {\n  }\n</code></pre><p style='margin-top:5px'>From clang-format 20"
    },
    "RemoveParentheses": {
      "type": "string",
      "enum": [
        "Leave",
        "MultipleParentheses",
        "ReturnStatement"
      ],
      "x-intellij-enum-metadata": {
        "Leave": {
          "description": "Do not remove parentheses."
        },
        "MultipleParentheses": {
          "description": "Replace multiple parentheses with single parentheses."
        },
        "ReturnStatement": {
          "description": "Also remove parentheses enclosing the expression in a"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#removeparentheses'>RemoveParentheses Documentation</a>\n<p style='margin-top:5px'>Remove redundant parentheses.\n<b>Warning:</b> Setting this option to any value other than <code>Leave</code> could lead to\n incorrect code formatting due to clang-format's lack of complete semantic\n information. As such, extra care should be taken to review code changes\n made by this option.<p style='margin-top:5px'>From clang-format 17<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "RemoveSemicolon": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#removesemicolon'>RemoveSemicolon Documentation</a>\n<p style='margin-top:5px'>Remove semicolons after the closing braces of functions and\nconstructors/destructors.\n<b>Warning:</b> Setting this option to <code>true</code> could lead to incorrect code formatting\n due to clang-format's lack of complete semantic information. As such,\n extra care should be taken to review code changes made by this option.\n\n<pre><code class='c++'>  false:                                     true:\n\n  int max(int a, int b) {                    int max(int a, int b) {\n    return a &gt; b ? a : b;                      return a &gt; b ? a : b;\n  };                                         }\n\n</code></pre><p style='margin-top:5px'>From clang-format 16"
    },
    "RequiresClausePosition": {
      "type": "string",
      "enum": [
        "OwnLine",
        "OwnLineWithBrace",
        "WithPreceding",
        "WithFollowing",
        "SingleLine"
      ],
      "x-intellij-enum-metadata": {
        "OwnLine": {
          "description": "Always put the 'requires' clause on its own line (possibly followed by"
        },
        "OwnLineWithBrace": {
          "description": "As with 'OwnLine', except, unless otherwise prohibited, place a"
        },
        "WithPreceding": {
          "description": "Try to put the clause together with the preceding part of a declaration."
        },
        "WithFollowing": {
          "description": "Try to put the 'requires' clause together with the class or function"
        },
        "SingleLine": {
          "description": "Try to put everything in the same line if possible. Otherwise normal"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#requiresclauseposition'>RequiresClausePosition Documentation</a>\n<p style='margin-top:5px'>The position of the <code>requires</code> clause.<p style='margin-top:5px'>From clang-format 15<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "RequiresExpressionIndentation": {
      "type": "string",
      "enum": [
        "OuterScope",
        "Keyword"
      ],
      "x-intellij-enum-metadata": {
        "OuterScope": {
          "description": "Align requires expression body relative to the indentation level of the"
        },
        "Keyword": {
          "description": "Align requires expression body relative to the 'requires' keyword."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#requiresexpressionindentation'>RequiresExpressionIndentation Documentation</a>\n<p style='margin-top:5px'>The indentation used for requires expression bodies.<p style='margin-top:5px'>From clang-format 16<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "SeparateDefinitionBlocks": {
      "type": "string",
      "enum": [
        "Leave",
        "Always",
        "Never"
      ],
      "x-intellij-enum-metadata": {
        "Leave": {
          "description": "Leave definition blocks as they are."
        },
        "Always": {
          "description": "Insert an empty line between definition blocks."
        },
        "Never": {
          "description": "Remove any empty line between definition blocks."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#separatedefinitionblocks'>SeparateDefinitionBlocks Documentation</a>\n<p style='margin-top:5px'>Specifies the use of empty lines to separate definition blocks, including\nclasses, structs, enums, and functions.\n\n<pre><code class='c++'>   Never                  v.s.     Always\n   #include &lt;cstring&gt;              #include &lt;cstring&gt;\n   struct Foo {\n     int a, b, c;                  struct Foo {\n   };                                int a, b, c;\n   namespace Ns {                  };\n   class Bar {\n   public:                         namespace Ns {\n     struct Foobar {               class Bar {\n       int a;                      public:\n       int b;                        struct Foobar {\n     };                                int a;\n   private:                            int b;\n     int t;                          };\n     int method1() {\n       // ...                      private:\n     }                               int t;\n     enum List {\n       ITEM1,                        int method1() {\n       ITEM2                           // ...\n     };                              }\n     template&lt;typename T&gt;\n     int method2(T x) {              enum List {\n       // ...                          ITEM1,\n     }                                 ITEM2\n     int i, j, k;                    };\n     int method3(int par) {\n       // ...                        template&lt;typename T&gt;\n     }                               int method2(T x) {\n   };                                  // ...\n   class C {};                       }\n   }\n                                     int i, j, k;\n\n                                     int method3(int par) {\n                                       // ...\n                                     }\n                                   };\n\n                                   class C {};\n                                   }\n</code></pre><p style='margin-top:5px'>From clang-format 14<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "ShortNamespaceLines": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#shortnamespacelines'>ShortNamespaceLines Documentation</a>\n<p style='margin-top:5px'>The maximal number of unwrapped lines that a short namespace spans.\nDefaults to 1.\n<p style='margin-top:5px'>This determines the maximum length of short namespaces by counting\nunwrapped lines (i.e. containing neither opening nor closing\nnamespace brace) and makes <code>FixNamespaceComments</code> omit adding\nend comments for those.\n\n<pre><code class='c++'>   ShortNamespaceLines: 1     vs.     ShortNamespaceLines: 0\n   namespace a {                      namespace a {\n     int foo;                           int foo;\n   }                                  } // namespace a\n\n   ShortNamespaceLines: 1     vs.     ShortNamespaceLines: 0\n   namespace b {                      namespace b {\n     int foo;                           int foo;\n     int bar;                           int bar;\n   } // namespace b                   } // namespace b\n</code></pre><p style='margin-top:5px'>From clang-format 13"
    },
    "SkipMacroDefinitionBody": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#skipmacrodefinitionbody'>SkipMacroDefinitionBody Documentation</a>\n<p style='margin-top:5px'>Do not format macro definition body.<p style='margin-top:5px'>From clang-format 18"
    },
    "SortIncludes": {
      "type": "string",
      "enum": [
        "Never",
        "CaseSensitive",
        "CaseInsensitive"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Includes are never sorted."
        },
        "CaseSensitive": {
          "description": "Includes are sorted in an ASCIIbetical or case sensitive fashion."
        },
        "CaseInsensitive": {
          "description": "Includes are sorted in an alphabetical or case insensitive fashion."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#sortincludes'>SortIncludes Documentation</a>\n<p style='margin-top:5px'>Controls if and how clang-format will sort <code>#includes</code>.<p style='margin-top:5px'>From clang-format 3.8<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "SortJavaStaticImport": {
      "type": "string",
      "enum": [
        "Before",
        "After"
      ],
      "x-intellij-enum-metadata": {
        "Before": {
          "description": "Static imports are placed before non-static imports."
        },
        "After": {
          "description": "Static imports are placed after non-static imports."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#sortjavastaticimport'>SortJavaStaticImport Documentation</a>\n<p style='margin-top:5px'>When sorting Java imports, by default static imports are placed before\nnon-static imports. If <code>JavaStaticImportAfterImport</code> is <code>After</code>,\nstatic imports are placed after non-static imports.<p style='margin-top:5px'>From clang-format 12<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "SortUsingDeclarations": {
      "type": "string",
      "enum": [
        "Never",
        "Lexicographic",
        "LexicographicNumeric"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Using declarations are never sorted."
        },
        "Lexicographic": {
          "description": "Using declarations are sorted in the order defined as follows:"
        },
        "LexicographicNumeric": {
          "description": "Using declarations are sorted in the order defined as follows:"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#sortusingdeclarations'>SortUsingDeclarations Documentation</a>\n<p style='margin-top:5px'>Controls if and how clang-format will sort using declarations.<p style='margin-top:5px'>From clang-format 5<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "SpaceAfterCStyleCast": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spaceaftercstylecast'>SpaceAfterCStyleCast Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, a space is inserted after C style casts.\n\n<pre><code class='c++'>   true:                                  false:\n   (int) i;                       vs.     (int)i;\n</code></pre><p style='margin-top:5px'>From clang-format 3.5"
    },
    "SpaceAfterLogicalNot": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spaceafterlogicalnot'>SpaceAfterLogicalNot Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, a space is inserted after the logical not operator (<code>!</code>).\n\n<pre><code class='c++'>   true:                                  false:\n   ! someExpression();            vs.     !someExpression();\n</code></pre><p style='margin-top:5px'>From clang-format 9"
    },
    "SpaceAfterTemplateKeyword": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spaceaftertemplatekeyword'>SpaceAfterTemplateKeyword Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, a space will be inserted after the <code>template</code> keyword.\n\n<pre><code class='c++'>   true:                                  false:\n   template &lt;int&gt; void foo();     vs.     template&lt;int&gt; void foo();\n</code></pre><p style='margin-top:5px'>From clang-format 4"
    },
    "SpaceAroundPointerQualifiers": {
      "type": "string",
      "enum": [
        "Default",
        "Before",
        "After",
        "Both"
      ],
      "x-intellij-enum-metadata": {
        "Default": {
          "description": "Don't ensure spaces around pointer qualifiers and use PointerAlignment"
        },
        "Before": {
          "description": "Ensure that there is a space before pointer qualifiers."
        },
        "After": {
          "description": "Ensure that there is a space after pointer qualifiers."
        },
        "Both": {
          "description": "Ensure that there is a space both before and after pointer qualifiers."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacearoundpointerqualifiers'>SpaceAroundPointerQualifiers Documentation</a>\n<p style='margin-top:5px'>Defines in which cases to put a space before or after pointer qualifiers<p style='margin-top:5px'>From clang-format 12<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "SpaceBeforeAssignmentOperators": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeassignmentoperators'>SpaceBeforeAssignmentOperators Documentation</a>\n<p style='margin-top:5px'>If <code>false</code>, spaces will be removed before assignment operators.\n\n<pre><code class='c++'>   true:                                  false:\n   int a = 5;                     vs.     int a= 5;\n   a += 42;                               a+= 42;\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "SpaceBeforeCaseColon": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforecasecolon'>SpaceBeforeCaseColon Documentation</a>\n<p style='margin-top:5px'>If <code>false</code>, spaces will be removed before case colon.\n\n<pre><code class='c++'>  true:                                   false\n  switch (x) {                    vs.     switch (x) {\n    case 1 : break;                         case 1: break;\n  }                                       }\n</code></pre><p style='margin-top:5px'>From clang-format 12"
    },
    "SpaceBeforeCpp11BracedList": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforecpp11bracedlist'>SpaceBeforeCpp11BracedList Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, a space will be inserted before a C++11 braced list\nused to initialize an object (after the preceding identifier or type).\n\n<pre><code class='c++'>   true:                                  false:\n   Foo foo { bar };               vs.     Foo foo{ bar };\n   Foo {};                                Foo{};\n   vector&lt;int&gt; { 1, 2, 3 };               vector&lt;int&gt;{ 1, 2, 3 };\n   new int[3] { 1, 2, 3 };                new int[3]{ 1, 2, 3 };\n</code></pre><p style='margin-top:5px'>From clang-format 7"
    },
    "SpaceBeforeCtorInitializerColon": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforectorinitializercolon'>SpaceBeforeCtorInitializerColon Documentation</a>\n<p style='margin-top:5px'>If <code>false</code>, spaces will be removed before constructor initializer\ncolon.\n\n<pre><code class='c++'>   true:                                  false:\n   Foo::Foo() : a(a) {}                   Foo::Foo(): a(a) {}\n</code></pre><p style='margin-top:5px'>From clang-format 7"
    },
    "SpaceBeforeInheritanceColon": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeinheritancecolon'>SpaceBeforeInheritanceColon Documentation</a>\n<p style='margin-top:5px'>If <code>false</code>, spaces will be removed before inheritance colon.\n\n<pre><code class='c++'>   true:                                  false:\n   class Foo : Bar {}             vs.     class Foo: Bar {}\n</code></pre><p style='margin-top:5px'>From clang-format 7"
    },
    "SpaceBeforeJsonColon": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforejsoncolon'>SpaceBeforeJsonColon Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, a space will be added before a JSON colon. For other\nlanguages, e.g. JavaScript, use <code>SpacesInContainerLiterals</code> instead.\n\n<pre><code class='c++'>   true:                                  false:\n   {                                      {\n     \"key\" : \"value\"              vs.       \"key\": \"value\"\n   }                                      }\n</code></pre><p style='margin-top:5px'>From clang-format 17"
    },
    "SpaceBeforeParens": {
      "type": "string",
      "enum": [
        "Never",
        "ControlStatements",
        "ControlStatementsExceptControlMacros",
        "NonEmptyParentheses",
        "Always",
        "Custom"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "This is deprecated and replaced by 'Custom' below, with all"
        },
        "ControlStatements": {
          "description": "Put a space before opening parentheses only after control statement"
        },
        "ControlStatementsExceptControlMacros": {
          "description": "Same as 'SBPO_ControlStatements' except this option doesn't apply to"
        },
        "NonEmptyParentheses": {
          "description": "Put a space before opening parentheses only if the parentheses are not"
        },
        "Always": {
          "description": "Always put a space before opening parentheses, except when it's"
        },
        "Custom": {
          "description": "Configure each individual space before parentheses in"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparens'>SpaceBeforeParens Documentation</a>\n<p style='margin-top:5px'>Defines in which cases to put a space before opening parentheses.<p style='margin-top:5px'>From clang-format 3.5<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "SpaceBeforeParensOptions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AfterControlStatements": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put space between control statement keywords\n(for/if/while...) and opening parentheses.\n\n<pre><code class='c++'>   true:                                  false:\n   if (...) {}                     vs.    if(...) {}\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "AfterForeachMacros": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put space between foreach macros and opening parentheses.\n\n<pre><code class='c++'>   true:                                  false:\n   FOREACH (...)                   vs.    FOREACH(...)\n     &lt;loop-body&gt;                            &lt;loop-body&gt;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "AfterFunctionDeclarationName": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put a space between function declaration name and opening\nparentheses.\n\n<pre><code class='c++'>   true:                                  false:\n   void f ();                      vs.    void f();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "AfterFunctionDefinitionName": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put a space between function definition name and opening\nparentheses.\n\n<pre><code class='c++'>   true:                                  false:\n   void f () {}                    vs.    void f() {}\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "AfterIfMacros": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put space between if macros and opening parentheses.\n\n<pre><code class='c++'>   true:                                  false:\n   IF (...)                        vs.    IF(...)\n     &lt;conditional-body&gt;                     &lt;conditional-body&gt;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "AfterOverloadedOperator": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put a space between operator overloading and opening\nparentheses.\n\n<pre><code class='c++'>   true:                                  false:\n   void operator++ (int a);        vs.    void operator++(int a);\n   object.operator++ (10);                object.operator++(10);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "AfterPlacementOperator": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put a space between operator <code>new</code>/<code>delete</code> and opening\nparenthesis.\n\n<pre><code class='c++'>   true:                                  false:\n   new (buf) T;                    vs.    new(buf) T;\n   delete (buf) T;                        delete(buf) T;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "AfterRequiresInClause": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put space between requires keyword in a requires clause and\nopening parentheses, if there is one.\n\n<pre><code class='c++'>   true:                                  false:\n   template&lt;typename T&gt;            vs.    template&lt;typename T&gt;\n   requires (A&lt;T&gt; && B&lt;T&gt;)                requires(A&lt;T&gt; && B&lt;T&gt;)\n   ...                                    ...\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "AfterRequiresInExpression": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put space between requires keyword in a requires expression\nand opening parentheses.\n\n<pre><code class='c++'>   true:                                  false:\n   template&lt;typename T&gt;            vs.    template&lt;typename T&gt;\n   concept C = requires (T t) {           concept C = requires(T t) {\n                 ...                                    ...\n               }                                      }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        },
        "BeforeNonEmptyParentheses": {
          "type": "boolean",
          "x-intellij-html-description": "If <code>true</code>, put a space before opening parentheses only if the\nparentheses are not empty.\n\n<pre><code class='c++'>   true:                                  false:\n   void f (int a);                 vs.    void f();\n   f (a);                                 f();\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforeparensoptions'>SpaceBeforeParensOptions Documentation</a>\n<p style='margin-top:5px'>Control of individual space before parentheses.\n<p style='margin-top:5px'>If <code>SpaceBeforeParens</code> is set to <code>Custom</code>, use this to specify\nhow each individual space before parentheses case should be handled.\nOtherwise, this is ignored.\n\n<pre><code class='yaml'>  # Example of usage:\n  SpaceBeforeParens: Custom\n  SpaceBeforeParensOptions:\n    AfterControlStatements: true\n    AfterFunctionDefinitionName: true\n</code></pre><p style='margin-top:5px'>Precise control over the spacing before parentheses.\n\n<pre><code class='c++'>  # Should be declared this way:\n  SpaceBeforeParens: Custom\n  SpaceBeforeParensOptions:\n    AfterControlStatements: true\n    AfterFunctionDefinitionName: true\n</code></pre><p style='margin-top:5px'>From clang-format 14"
    },
    "SpaceBeforeRangeBasedForLoopColon": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforerangebasedforloopcolon'>SpaceBeforeRangeBasedForLoopColon Documentation</a>\n<p style='margin-top:5px'>If <code>false</code>, spaces will be removed before range-based for loop\ncolon.\n\n<pre><code class='c++'>   true:                                  false:\n   for (auto v : values) {}       vs.     for(auto v: values) {}\n</code></pre><p style='margin-top:5px'>From clang-format 7"
    },
    "SpaceBeforeSquareBrackets": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacebeforesquarebrackets'>SpaceBeforeSquareBrackets Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, spaces will be before  <code>[</code>.\nLambdas will not be affected. Only the first <code>[</code> will get a space added.\n\n<pre><code class='c++'>   true:                                  false:\n   int a [5];                    vs.      int a[5];\n   int a [5][5];                 vs.      int a[5][5];\n</code></pre><p style='margin-top:5px'>From clang-format 10"
    },
    "SpaceInEmptyBlock": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spaceinemptyblock'>SpaceInEmptyBlock Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, spaces will be inserted into <code>{}</code>.\n\n<pre><code class='c++'>   true:                                false:\n   void f() { }                   vs.   void f() {}\n   while (true) { }                     while (true) {}\n</code></pre><p style='margin-top:5px'>From clang-format 10"
    },
    "SpaceInEmptyParentheses": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spaceinemptyparentheses'>SpaceInEmptyParentheses Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, spaces may be inserted into <code>()</code>.\nThis option is **deprecated**. See <code>InEmptyParentheses</code> of\n<code>SpacesInParensOptions</code>.<p style='margin-top:5px'>From clang-format 3.7",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "SpacesBeforeTrailingComments": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesbeforetrailingcomments'>SpacesBeforeTrailingComments Documentation</a>\n<p style='margin-top:5px'>The number of spaces before trailing line comments\n(<code>//</code> - comments).\n<p style='margin-top:5px'>This does not affect trailing block comments (<code>/*</code> - comments) as those\ncommonly have different usage patterns and a number of special cases.  In\nthe case of Verilog, it doesn't affect a comment right after the opening\nparenthesis in the port or parameter list in a module header, because it\nis probably for the port on the following line instead of the parenthesis\nit follows.\n\n<pre><code class='c++'>   SpacesBeforeTrailingComments: 3\n   void f() {\n     if (true) {   // foo1\n       f();        // bar\n     }             // foo\n   }\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "SpacesInAngles": {
      "type": "string",
      "enum": [
        "Never",
        "Always",
        "Leave"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Remove spaces after ''."
        },
        "Always": {
          "description": "Add spaces after ''."
        },
        "Leave": {
          "description": "Keep a single space after '' if any spaces were"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinangles'>SpacesInAngles Documentation</a>\n<p style='margin-top:5px'>The SpacesInAnglesStyle to use for template argument lists.<p style='margin-top:5px'>From clang-format 3.4<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "SpacesInCStyleCastParentheses": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesincstylecastparentheses'>SpacesInCStyleCastParentheses Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, spaces may be inserted into C style casts.\nThis option is **deprecated**. See <code>InCStyleCasts</code> of\n<code>SpacesInParensOptions</code>.<p style='margin-top:5px'>From clang-format 3.7",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "SpacesInConditionalStatement": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinconditionalstatement'>SpacesInConditionalStatement Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, spaces will be inserted around if/for/switch/while\nconditions.\nThis option is **deprecated**. See <code>InConditionalStatements</code> of\n<code>SpacesInParensOptions</code>.<p style='margin-top:5px'>From clang-format 10",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "SpacesInContainerLiterals": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesincontainerliterals'>SpacesInContainerLiterals Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, spaces are inserted inside container literals (e.g.  ObjC and\nJavascript array and dict literals). For JSON, use\n<code>SpaceBeforeJsonColon</code> instead.\n\n<pre><code class='js'>   true:                                  false:\n   var arr = [ 1, 2, 3 ];         vs.     var arr = [1, 2, 3];\n   f({a : 1, b : 2, c : 3});              f({a: 1, b: 2, c: 3});\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "SpacesInLineCommentPrefix": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Maximum": {
          "type": "number",
          "x-intellij-html-description": "The maximum number of spaces at the start of the comment.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinlinecommentprefix'>SpacesInLineCommentPrefix Documentation</a>\n"
        },
        "Minimum": {
          "type": "number",
          "x-intellij-html-description": "The minimum number of spaces at the start of the comment.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinlinecommentprefix'>SpacesInLineCommentPrefix Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinlinecommentprefix'>SpacesInLineCommentPrefix Documentation</a>\n<p style='margin-top:5px'>How many spaces are allowed at the start of a line comment. To disable the\nmaximum set it to <code>-1</code>, apart from that the maximum takes precedence\nover the minimum.\n\n<pre><code class='c++'>  Minimum = 1\n  Maximum = -1\n  // One space is forced\n\n  //  but more spaces are possible\n\n  Minimum = 0\n  Maximum = 0\n  //Forces to start every comment directly after the slashes\n</code></pre>\n<p style='margin-top:5px'>Note that in line comment sections the relative indent of the subsequent\nlines is kept, that means the following:\n\n<pre><code class='c++'>  before:                                   after:\n  Minimum: 1\n  //if (b) {                                // if (b) {\n  //  return true;                          //   return true;\n  //}                                       // }\n\n  Maximum: 0\n  /// List:                                 ///List:\n  ///  - Foo                                /// - Foo\n  ///    - Bar                              ///   - Bar\n</code></pre>\n<p style='margin-top:5px'>This option has only effect if <code>ReflowComments</code> is set to <code>true</code>.<p style='margin-top:5px'>Control of spaces within a single line comment.<p style='margin-top:5px'>From clang-format 13"
    },
    "SpacesInParens": {
      "type": "string",
      "enum": [
        "Never",
        "Custom"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Never put a space in parentheses."
        },
        "Custom": {
          "description": "Configure each individual space in parentheses in"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinparens'>SpacesInParens Documentation</a>\n<p style='margin-top:5px'>Defines in which cases spaces will be inserted after <code>(</code> and before\n<code>)</code>.<p style='margin-top:5px'>From clang-format 17<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "SpacesInParensOptions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ExceptDoubleParentheses": {
          "type": "boolean",
          "x-intellij-html-description": "Override any of the following options to prevent addition of space\nwhen both opening and closing parentheses use multiple parentheses.\n\n<pre><code class='c++'>  true:\n  __attribute__(( noreturn ))\n  __decltype__(( x ))\n  if (( a = b ))\n</code></pre>\n false:\n   Uses the applicable option.<p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinparensoptions'>SpacesInParensOptions Documentation</a>\n"
        },
        "InCStyleCasts": {
          "type": "boolean",
          "x-intellij-html-description": "Put a space in C style casts.\n\n<pre><code class='c++'>  true:                                  false:\n  x = ( int32 )y                  vs.    x = (int32)y\n  y = (( int (*)(int) )foo)(x);          y = ((int (*)(int))foo)(x);\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinparensoptions'>SpacesInParensOptions Documentation</a>\n"
        },
        "InConditionalStatements": {
          "type": "boolean",
          "x-intellij-html-description": "Put a space in parentheses only inside conditional statements\n(<code>for/if/while/switch...</code>).\n\n<pre><code class='c++'>   true:                                  false:\n   if ( a )  { ... }              vs.     if (a) { ... }\n   while ( i &lt; 5 )  { ... }               while (i &lt; 5) { ... }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinparensoptions'>SpacesInParensOptions Documentation</a>\n"
        },
        "InEmptyParentheses": {
          "type": "boolean",
          "x-intellij-html-description": "Insert a space in empty parentheses, i.e. <code>()</code>.\n\n<pre><code class='c++'>   true:                                false:\n   void f( ) {                    vs.   void f() {\n     int x[] = {foo( ), bar( )};          int x[] = {foo(), bar()};\n     if (true) {                          if (true) {\n       f( );                                f();\n     }                                    }\n   }                                    }\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinparensoptions'>SpacesInParensOptions Documentation</a>\n"
        },
        "Other": {
          "type": "boolean",
          "x-intellij-html-description": "Put a space in parentheses not covered by preceding options.\n\n<pre><code class='c++'>  true:                                 false:\n  t f( Deleted & ) & = delete;    vs.   t f(Deleted &) & = delete;\n</code></pre><p><a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinparensoptions'>SpacesInParensOptions Documentation</a>\n"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinparensoptions'>SpacesInParensOptions Documentation</a>\n<p style='margin-top:5px'>Control of individual spaces in parentheses.\n<p style='margin-top:5px'>If <code>SpacesInParens</code> is set to <code>Custom</code>, use this to specify\nhow each individual space in parentheses case should be handled.\nOtherwise, this is ignored.\n\n<pre><code class='yaml'>  # Example of usage:\n  SpacesInParens: Custom\n  SpacesInParensOptions:\n    ExceptDoubleParentheses: false\n    InConditionalStatements: true\n    InEmptyParentheses: true\n</code></pre><p style='margin-top:5px'>Precise control over the spacing in parentheses.\n\n<pre><code class='c++'>  # Should be declared this way:\n  SpacesInParens: Custom\n  SpacesInParensOptions:\n    ExceptDoubleParentheses: false\n    InConditionalStatements: true\n    Other: true\n</code></pre><p style='margin-top:5px'>From clang-format 17"
    },
    "SpacesInParentheses": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinparentheses'>SpacesInParentheses Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, spaces will be inserted after <code>(</code> and before <code>)</code>.\nThis option is **deprecated**. The previous behavior is preserved by using\n<code>SpacesInParens</code> with <code>Custom</code> and by setting all\n<code>SpacesInParensOptions</code> to <code>true</code> except for <code>InCStyleCasts</code> and\n<code>InEmptyParentheses</code>.<p style='margin-top:5px'>From clang-format 3.7",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "SpacesInSquareBrackets": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#spacesinsquarebrackets'>SpacesInSquareBrackets Documentation</a>\n<p style='margin-top:5px'>If <code>true</code>, spaces will be inserted after <code>[</code> and before <code>]</code>.\nLambdas without arguments or unspecified size array declarations will not\nbe affected.\n\n<pre><code class='c++'>   true:                                  false:\n   int a[ 5 ];                    vs.     int a[5];\n   std::unique_ptr&lt;int[]&gt; foo() {} // Won't be affected\n</code></pre><p style='margin-top:5px'>From clang-format 3.7"
    },
    "Standard": {
      "type": "string",
      "enum": [
        "Cpp03",
        "Cpp11",
        "Cpp14",
        "Cpp17",
        "Cpp20",
        "Latest",
        "Auto"
      ],
      "x-intellij-enum-metadata": {
        "Cpp03": {
          "description": "Parse and format as C++03."
        },
        "Cpp11": {
          "description": "Parse and format as C++11."
        },
        "Cpp14": {
          "description": "Parse and format as C++14."
        },
        "Cpp17": {
          "description": "Parse and format as C++17."
        },
        "Cpp20": {
          "description": "Parse and format as C++20."
        },
        "Latest": {
          "description": "Parse and format using the latest supported language version."
        },
        "Auto": {
          "description": "Automatic detection based on the input."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#standard'>Standard Documentation</a>\n<p style='margin-top:5px'>Parse and format C++ constructs compatible with this standard.\n\n<pre><code class='c++'>   c++03:                                 latest:\n   vector&lt;set&lt;int&gt; &gt; x;           vs.     vector&lt;set&lt;int&gt;&gt; x;\n</code></pre><p style='margin-top:5px'>From clang-format 3.7<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "StatementAttributeLikeMacros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#statementattributelikemacros'>StatementAttributeLikeMacros Documentation</a>\n<p style='margin-top:5px'>Macros which are ignored in front of a statement, as if they were an\nattribute. So that they are not parsed as identifier, for example for Qts\nemit.\n\n<pre><code class='c++'>  AlignConsecutiveDeclarations: true\n  StatementAttributeLikeMacros: []\n  unsigned char data = 'x';\n  emit          signal(data); // This is parsed as variable declaration.\n\n  AlignConsecutiveDeclarations: true\n  StatementAttributeLikeMacros: [emit]\n  unsigned char data = 'x';\n  emit signal(data); // Now it's fine again.\n</code></pre><p style='margin-top:5px'>From clang-format 12"
    },
    "StatementMacros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#statementmacros'>StatementMacros Documentation</a>\n<p style='margin-top:5px'>A vector of macros that should be interpreted as complete statements.\n<p style='margin-top:5px'>Typical macros are expressions and require a semicolon to be added.\nSometimes this is not the case, and this allows to make clang-format aware\nof such cases.\n<p style='margin-top:5px'>For example: Q_UNUSED<p style='margin-top:5px'>From clang-format 8"
    },
    "TabWidth": {
      "type": "number",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#tabwidth'>TabWidth Documentation</a>\n<p style='margin-top:5px'>The number of columns used for tab stops.<p style='margin-top:5px'>From clang-format 3.7"
    },
    "TableGenBreakInsideDAGArg": {
      "type": "string",
      "enum": [
        "DontBreak",
        "BreakElements",
        "BreakAll"
      ],
      "x-intellij-enum-metadata": {
        "DontBreak": {
          "description": "Never break inside DAGArg."
        },
        "BreakElements": {
          "description": "Break inside DAGArg after each list element but for the last."
        },
        "BreakAll": {
          "description": "Break inside DAGArg after the operator and the all elements."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#tablegenbreakinsidedagarg'>TableGenBreakInsideDAGArg Documentation</a>\n<p style='margin-top:5px'>The styles of the line break inside the DAGArg in TableGen.<p style='margin-top:5px'>From clang-format 19<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "TableGenBreakingDAGArgOperators": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#tablegenbreakingdagargoperators'>TableGenBreakingDAGArgOperators Documentation</a>\n<p style='margin-top:5px'>Works only when TableGenBreakInsideDAGArg is not DontBreak.\nThe string list needs to consist of identifiers in TableGen.\nIf any identifier is specified, this limits the line breaks by\nTableGenBreakInsideDAGArg option only on DAGArg values beginning with\nthe specified identifiers.\n<p style='margin-top:5px'>For example the configuration,\n\n<pre><code class='yaml'>  TableGenBreakInsideDAGArg: BreakAll\n  TableGenBreakingDAGArgOperators: [ins, outs]\n</code></pre>\n<p style='margin-top:5px'>makes the line break only occurs inside DAGArgs beginning with the\nspecified identifiers <code>ins</code> and <code>outs</code>.\n<p style='margin-top:5px'>\n<pre><code class='c++'>  let DAGArgIns = (ins\n      i32:$src1,\n      i32:$src2\n  );\n  let DAGArgOtherID = (other i32:$other1, i32:$other2);\n  let DAGArgBang = (!cast&lt;SomeType&gt;(\"Some\") i32:$src1, i32:$src2)\n</code></pre><p style='margin-top:5px'>From clang-format 19"
    },
    "TemplateNames": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#templatenames'>TemplateNames Documentation</a>\n<p style='margin-top:5px'>A vector of non-keyword identifiers that should be interpreted as template\nnames.\n<p style='margin-top:5px'>A <code><</code> after a template name is annotated as a template opener instead of\na binary operator.\n<p style='margin-top:5px'><p style='margin-top:5px'>From clang-format 20"
    },
    "TypeNames": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#typenames'>TypeNames Documentation</a>\n<p style='margin-top:5px'>A vector of non-keyword identifiers that should be interpreted as type\nnames.\n<p style='margin-top:5px'>A <code>*</code>, <code>&</code>, or <code>&&</code> between a type name and another non-keyword\nidentifier is annotated as a pointer or reference token instead of a\nbinary operator.\n<p style='margin-top:5px'><p style='margin-top:5px'>From clang-format 17"
    },
    "TypenameMacros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#typenamemacros'>TypenameMacros Documentation</a>\n<p style='margin-top:5px'>A vector of macros that should be interpreted as type declarations\ninstead of as function calls.\n<p style='margin-top:5px'>These are expected to be macros of the form:\n\n<pre><code class='c++'>  STACK_OF(...)\n</code></pre>\n<p style='margin-top:5px'>In the .clang-format configuration file, this can be configured like:\n\n<pre><code class='yaml'>  TypenameMacros: [STACK_OF, LIST]\n</code></pre>\n<p style='margin-top:5px'>For example: OpenSSL STACK_OF, BSD LIST_ENTRY.<p style='margin-top:5px'>From clang-format 9"
    },
    "UseCRLF": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#usecrlf'>UseCRLF Documentation</a>\n<p style='margin-top:5px'>This option is **deprecated**. See <code>LF</code> and <code>CRLF</code> of <code>LineEnding</code>.<p style='margin-top:5px'>From clang-format 10",
      "deprecated": true,
      "deprecationMessage": "Check the documentation for more information."
    },
    "UseTab": {
      "type": "string",
      "enum": [
        "Never",
        "ForIndentation",
        "ForContinuationAndIndentation",
        "AlignWithSpaces",
        "Always"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Never use tab."
        },
        "ForIndentation": {
          "description": "Use tabs only for indentation."
        },
        "ForContinuationAndIndentation": {
          "description": "Fill all leading whitespace with tabs, and use spaces for alignment that"
        },
        "AlignWithSpaces": {
          "description": "Use tabs for line continuation and indentation, and spaces for"
        },
        "Always": {
          "description": "Use tabs whenever we need to fill whitespace that spans at least from"
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#usetab'>UseTab Documentation</a>\n<p style='margin-top:5px'>The way to use tab characters in the resulting file.<p style='margin-top:5px'>From clang-format 3.7<p style='margin-top:5px'>Invoke completion to see all options"
    },
    "VariableTemplates": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#variabletemplates'>VariableTemplates Documentation</a>\n<p style='margin-top:5px'>A vector of non-keyword identifiers that should be interpreted as variable\ntemplate names.\n<p style='margin-top:5px'>A <code>)</code> after a variable template instantiation is **not** annotated as\nthe closing parenthesis of C-style cast operator.\n<p style='margin-top:5px'><p style='margin-top:5px'>From clang-format 20"
    },
    "VerilogBreakBetweenInstancePorts": {
      "type": "boolean",
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#verilogbreakbetweeninstanceports'>VerilogBreakBetweenInstancePorts Documentation</a>\n<p style='margin-top:5px'>For Verilog, put each port on its own line in module instantiations.\n\n<pre><code class='c++'>   true:\n   ffnand ff1(.q(),\n              .qbar(out1),\n              .clear(in1),\n              .preset(in2));\n\n   false:\n   ffnand ff1(.q(), .qbar(out1), .clear(in1), .preset(in2));\n</code></pre><p style='margin-top:5px'>From clang-format 17"
    },
    "WhitespaceSensitiveMacros": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#whitespacesensitivemacros'>WhitespaceSensitiveMacros Documentation</a>\n<p style='margin-top:5px'>A vector of macros which are whitespace-sensitive and should not\nbe touched.\n<p style='margin-top:5px'>These are expected to be macros of the form:\n\n<pre><code class='c++'>  STRINGIZE(...)\n</code></pre>\n<p style='margin-top:5px'>In the .clang-format configuration file, this can be configured like:\n\n<pre><code class='yaml'>  WhitespaceSensitiveMacros: [STRINGIZE, PP_STRINGIZE]\n</code></pre>\n<p style='margin-top:5px'>For example: BOOST_PP_STRINGIZE<p style='margin-top:5px'>From clang-format 11"
    },
    "WrapNamespaceBodyWithEmptyLines": {
      "type": "string",
      "enum": [
        "Never",
        "Always",
        "Leave"
      ],
      "x-intellij-enum-metadata": {
        "Never": {
          "description": "Remove all empty lines at the beginning and the end of namespace body."
        },
        "Always": {
          "description": "Always have at least one empty line at the beginning and the end of"
        },
        "Leave": {
          "description": "Keep existing newlines at the beginning and the end of namespace body."
        }
      },
      "x-intellij-html-description": "<a href='https://clang.llvm.org/docs/ClangFormatStyleOptions.html#wrapnamespacebodywithemptylines'>WrapNamespaceBodyWithEmptyLines Documentation</a>\n<p style='margin-top:5px'>Wrap namespace body with empty lines.<p style='margin-top:5px'>From clang-format 20<p style='margin-top:5px'>Invoke completion to see all options"
    }
  }
}
